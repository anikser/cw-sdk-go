// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: public/client/client.proto

package ProtobufClient

import (
	fmt "fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type WebAuthenticationResult_Status int32

const (
	WebAuthenticationResult_UNKNOWN         WebAuthenticationResult_Status = 0
	WebAuthenticationResult_AUTHENTICATED   WebAuthenticationResult_Status = 1
	WebAuthenticationResult_INVALID_SESSION WebAuthenticationResult_Status = 2
	WebAuthenticationResult_MFA_REQUIRED    WebAuthenticationResult_Status = 3
)

var WebAuthenticationResult_Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "AUTHENTICATED",
	2: "INVALID_SESSION",
	3: "MFA_REQUIRED",
}
var WebAuthenticationResult_Status_value = map[string]int32{
	"UNKNOWN":         0,
	"AUTHENTICATED":   1,
	"INVALID_SESSION": 2,
	"MFA_REQUIRED":    3,
}

func (x WebAuthenticationResult_Status) String() string {
	return proto.EnumName(WebAuthenticationResult_Status_name, int32(x))
}
func (WebAuthenticationResult_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_client_f59acd1518508758, []int{3, 0}
}

type APIAuthenticationMessage_Source int32

const (
	APIAuthenticationMessage_UNKNOWN        APIAuthenticationMessage_Source = 0
	APIAuthenticationMessage_GOLANG_SDK     APIAuthenticationMessage_Source = 1
	APIAuthenticationMessage_JAVASCRIPT_SDK APIAuthenticationMessage_Source = 2
	APIAuthenticationMessage_NODE_SDK       APIAuthenticationMessage_Source = 3
	APIAuthenticationMessage_RUST_SDK       APIAuthenticationMessage_Source = 5
	APIAuthenticationMessage_CW_WEB         APIAuthenticationMessage_Source = 4
)

var APIAuthenticationMessage_Source_name = map[int32]string{
	0: "UNKNOWN",
	1: "GOLANG_SDK",
	2: "JAVASCRIPT_SDK",
	3: "NODE_SDK",
	5: "RUST_SDK",
	4: "CW_WEB",
}
var APIAuthenticationMessage_Source_value = map[string]int32{
	"UNKNOWN":        0,
	"GOLANG_SDK":     1,
	"JAVASCRIPT_SDK": 2,
	"NODE_SDK":       3,
	"RUST_SDK":       5,
	"CW_WEB":         4,
}

func (x APIAuthenticationMessage_Source) String() string {
	return proto.EnumName(APIAuthenticationMessage_Source_name, int32(x))
}
func (APIAuthenticationMessage_Source) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_client_f59acd1518508758, []int{10, 0}
}

// ClientMessage is a wrapper message used to describe the supplied client message
// and pass metadata about the client.
type ClientMessage struct {
	// Types that are valid to be assigned to Body:
	//	*ClientMessage_Identification
	//	*ClientMessage_Subscribe
	//	*ClientMessage_Unsubscribe
	//	*ClientMessage_WebAuthentication
	//	*ClientMessage_ApiAuthentication
	//	*ClientMessage_ClientSession
	Body                 isClientMessage_Body `protobuf_oneof:"body"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ClientMessage) Reset()         { *m = ClientMessage{} }
func (m *ClientMessage) String() string { return proto.CompactTextString(m) }
func (*ClientMessage) ProtoMessage()    {}
func (*ClientMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_f59acd1518508758, []int{0}
}
func (m *ClientMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClientMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientMessage.Merge(dst, src)
}
func (m *ClientMessage) XXX_Size() int {
	return m.Size()
}
func (m *ClientMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ClientMessage proto.InternalMessageInfo

type isClientMessage_Body interface {
	isClientMessage_Body()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ClientMessage_Identification struct {
	Identification *ClientIdentificationMessage `protobuf:"bytes,1,opt,name=identification,proto3,oneof"`
}
type ClientMessage_Subscribe struct {
	Subscribe *ClientSubscribeMessage `protobuf:"bytes,2,opt,name=subscribe,proto3,oneof"`
}
type ClientMessage_Unsubscribe struct {
	Unsubscribe *ClientUnsubscribeMessage `protobuf:"bytes,3,opt,name=unsubscribe,proto3,oneof"`
}
type ClientMessage_WebAuthentication struct {
	WebAuthentication *WebAuthenticationMessage `protobuf:"bytes,4,opt,name=webAuthentication,proto3,oneof"`
}
type ClientMessage_ApiAuthentication struct {
	ApiAuthentication *APIAuthenticationMessage `protobuf:"bytes,5,opt,name=apiAuthentication,proto3,oneof"`
}
type ClientMessage_ClientSession struct {
	ClientSession *ClientSessionMessage `protobuf:"bytes,6,opt,name=clientSession,proto3,oneof"`
}

func (*ClientMessage_Identification) isClientMessage_Body()    {}
func (*ClientMessage_Subscribe) isClientMessage_Body()         {}
func (*ClientMessage_Unsubscribe) isClientMessage_Body()       {}
func (*ClientMessage_WebAuthentication) isClientMessage_Body() {}
func (*ClientMessage_ApiAuthentication) isClientMessage_Body() {}
func (*ClientMessage_ClientSession) isClientMessage_Body()     {}

func (m *ClientMessage) GetBody() isClientMessage_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *ClientMessage) GetIdentification() *ClientIdentificationMessage {
	if x, ok := m.GetBody().(*ClientMessage_Identification); ok {
		return x.Identification
	}
	return nil
}

func (m *ClientMessage) GetSubscribe() *ClientSubscribeMessage {
	if x, ok := m.GetBody().(*ClientMessage_Subscribe); ok {
		return x.Subscribe
	}
	return nil
}

func (m *ClientMessage) GetUnsubscribe() *ClientUnsubscribeMessage {
	if x, ok := m.GetBody().(*ClientMessage_Unsubscribe); ok {
		return x.Unsubscribe
	}
	return nil
}

func (m *ClientMessage) GetWebAuthentication() *WebAuthenticationMessage {
	if x, ok := m.GetBody().(*ClientMessage_WebAuthentication); ok {
		return x.WebAuthentication
	}
	return nil
}

func (m *ClientMessage) GetApiAuthentication() *APIAuthenticationMessage {
	if x, ok := m.GetBody().(*ClientMessage_ApiAuthentication); ok {
		return x.ApiAuthentication
	}
	return nil
}

func (m *ClientMessage) GetClientSession() *ClientSessionMessage {
	if x, ok := m.GetBody().(*ClientMessage_ClientSession); ok {
		return x.ClientSession
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ClientMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ClientMessage_OneofMarshaler, _ClientMessage_OneofUnmarshaler, _ClientMessage_OneofSizer, []interface{}{
		(*ClientMessage_Identification)(nil),
		(*ClientMessage_Subscribe)(nil),
		(*ClientMessage_Unsubscribe)(nil),
		(*ClientMessage_WebAuthentication)(nil),
		(*ClientMessage_ApiAuthentication)(nil),
		(*ClientMessage_ClientSession)(nil),
	}
}

func _ClientMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ClientMessage)
	// body
	switch x := m.Body.(type) {
	case *ClientMessage_Identification:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Identification); err != nil {
			return err
		}
	case *ClientMessage_Subscribe:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Subscribe); err != nil {
			return err
		}
	case *ClientMessage_Unsubscribe:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Unsubscribe); err != nil {
			return err
		}
	case *ClientMessage_WebAuthentication:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WebAuthentication); err != nil {
			return err
		}
	case *ClientMessage_ApiAuthentication:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ApiAuthentication); err != nil {
			return err
		}
	case *ClientMessage_ClientSession:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClientSession); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ClientMessage.Body has unexpected type %T", x)
	}
	return nil
}

func _ClientMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ClientMessage)
	switch tag {
	case 1: // body.identification
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClientIdentificationMessage)
		err := b.DecodeMessage(msg)
		m.Body = &ClientMessage_Identification{msg}
		return true, err
	case 2: // body.subscribe
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClientSubscribeMessage)
		err := b.DecodeMessage(msg)
		m.Body = &ClientMessage_Subscribe{msg}
		return true, err
	case 3: // body.unsubscribe
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClientUnsubscribeMessage)
		err := b.DecodeMessage(msg)
		m.Body = &ClientMessage_Unsubscribe{msg}
		return true, err
	case 4: // body.webAuthentication
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WebAuthenticationMessage)
		err := b.DecodeMessage(msg)
		m.Body = &ClientMessage_WebAuthentication{msg}
		return true, err
	case 5: // body.apiAuthentication
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(APIAuthenticationMessage)
		err := b.DecodeMessage(msg)
		m.Body = &ClientMessage_ApiAuthentication{msg}
		return true, err
	case 6: // body.clientSession
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClientSessionMessage)
		err := b.DecodeMessage(msg)
		m.Body = &ClientMessage_ClientSession{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ClientMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ClientMessage)
	// body
	switch x := m.Body.(type) {
	case *ClientMessage_Identification:
		s := proto.Size(x.Identification)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientMessage_Subscribe:
		s := proto.Size(x.Subscribe)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientMessage_Unsubscribe:
		s := proto.Size(x.Unsubscribe)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientMessage_WebAuthentication:
		s := proto.Size(x.WebAuthentication)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientMessage_ApiAuthentication:
		s := proto.Size(x.ApiAuthentication)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientMessage_ClientSession:
		s := proto.Size(x.ClientSession)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ClientIdentificationMessage is the first message sent is from the client to
// the server, identifying itself and the subscriptions it desires.
type ClientIdentificationMessage struct {
	Useragent            string                `protobuf:"bytes,1,opt,name=useragent,proto3" json:"useragent,omitempty"`
	Revision             string                `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	Integration          string                `protobuf:"bytes,3,opt,name=integration,proto3" json:"integration,omitempty"`
	Locale               string                `protobuf:"bytes,4,opt,name=locale,proto3" json:"locale,omitempty"`
	Subscriptions        []string              `protobuf:"bytes,5,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"` // Deprecated: Do not use.
	ClientSubscriptions  []*ClientSubscription `protobuf:"bytes,6,rep,name=clientSubscriptions,proto3" json:"clientSubscriptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ClientIdentificationMessage) Reset()         { *m = ClientIdentificationMessage{} }
func (m *ClientIdentificationMessage) String() string { return proto.CompactTextString(m) }
func (*ClientIdentificationMessage) ProtoMessage()    {}
func (*ClientIdentificationMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_f59acd1518508758, []int{1}
}
func (m *ClientIdentificationMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientIdentificationMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientIdentificationMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClientIdentificationMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientIdentificationMessage.Merge(dst, src)
}
func (m *ClientIdentificationMessage) XXX_Size() int {
	return m.Size()
}
func (m *ClientIdentificationMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientIdentificationMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ClientIdentificationMessage proto.InternalMessageInfo

func (m *ClientIdentificationMessage) GetUseragent() string {
	if m != nil {
		return m.Useragent
	}
	return ""
}

func (m *ClientIdentificationMessage) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func (m *ClientIdentificationMessage) GetIntegration() string {
	if m != nil {
		return m.Integration
	}
	return ""
}

func (m *ClientIdentificationMessage) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

// Deprecated: Do not use.
func (m *ClientIdentificationMessage) GetSubscriptions() []string {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

func (m *ClientIdentificationMessage) GetClientSubscriptions() []*ClientSubscription {
	if m != nil {
		return m.ClientSubscriptions
	}
	return nil
}

type WebAuthenticationMessage struct {
	Identification       *ClientIdentificationMessage `protobuf:"bytes,1,opt,name=identification,proto3" json:"identification,omitempty"`
	Token                string                       `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Nonce                string                       `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	AccessList           []string                     `protobuf:"bytes,4,rep,name=access_list,json=accessList,proto3" json:"access_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *WebAuthenticationMessage) Reset()         { *m = WebAuthenticationMessage{} }
func (m *WebAuthenticationMessage) String() string { return proto.CompactTextString(m) }
func (*WebAuthenticationMessage) ProtoMessage()    {}
func (*WebAuthenticationMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_f59acd1518508758, []int{2}
}
func (m *WebAuthenticationMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebAuthenticationMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebAuthenticationMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *WebAuthenticationMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebAuthenticationMessage.Merge(dst, src)
}
func (m *WebAuthenticationMessage) XXX_Size() int {
	return m.Size()
}
func (m *WebAuthenticationMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_WebAuthenticationMessage.DiscardUnknown(m)
}

var xxx_messageInfo_WebAuthenticationMessage proto.InternalMessageInfo

func (m *WebAuthenticationMessage) GetIdentification() *ClientIdentificationMessage {
	if m != nil {
		return m.Identification
	}
	return nil
}

func (m *WebAuthenticationMessage) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *WebAuthenticationMessage) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *WebAuthenticationMessage) GetAccessList() []string {
	if m != nil {
		return m.AccessList
	}
	return nil
}

type WebAuthenticationResult struct {
	Status               WebAuthenticationResult_Status `protobuf:"varint,1,opt,name=status,proto3,enum=ProtobufClient.WebAuthenticationResult_Status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *WebAuthenticationResult) Reset()         { *m = WebAuthenticationResult{} }
func (m *WebAuthenticationResult) String() string { return proto.CompactTextString(m) }
func (*WebAuthenticationResult) ProtoMessage()    {}
func (*WebAuthenticationResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_f59acd1518508758, []int{3}
}
func (m *WebAuthenticationResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebAuthenticationResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebAuthenticationResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *WebAuthenticationResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebAuthenticationResult.Merge(dst, src)
}
func (m *WebAuthenticationResult) XXX_Size() int {
	return m.Size()
}
func (m *WebAuthenticationResult) XXX_DiscardUnknown() {
	xxx_messageInfo_WebAuthenticationResult.DiscardUnknown(m)
}

var xxx_messageInfo_WebAuthenticationResult proto.InternalMessageInfo

func (m *WebAuthenticationResult) GetStatus() WebAuthenticationResult_Status {
	if m != nil {
		return m.Status
	}
	return WebAuthenticationResult_UNKNOWN
}

type TradeSessionAuth struct {
	ApiKey               string   `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	ApiSecret            string   `protobuf:"bytes,2,opt,name=api_secret,json=apiSecret,proto3" json:"api_secret,omitempty"`
	CustomerId           string   `protobuf:"bytes,3,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	KeyPassphrase        string   `protobuf:"bytes,4,opt,name=key_passphrase,json=keyPassphrase,proto3" json:"key_passphrase,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TradeSessionAuth) Reset()         { *m = TradeSessionAuth{} }
func (m *TradeSessionAuth) String() string { return proto.CompactTextString(m) }
func (*TradeSessionAuth) ProtoMessage()    {}
func (*TradeSessionAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_f59acd1518508758, []int{4}
}
func (m *TradeSessionAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradeSessionAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradeSessionAuth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TradeSessionAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeSessionAuth.Merge(dst, src)
}
func (m *TradeSessionAuth) XXX_Size() int {
	return m.Size()
}
func (m *TradeSessionAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeSessionAuth.DiscardUnknown(m)
}

var xxx_messageInfo_TradeSessionAuth proto.InternalMessageInfo

func (m *TradeSessionAuth) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

func (m *TradeSessionAuth) GetApiSecret() string {
	if m != nil {
		return m.ApiSecret
	}
	return ""
}

func (m *TradeSessionAuth) GetCustomerId() string {
	if m != nil {
		return m.CustomerId
	}
	return ""
}

func (m *TradeSessionAuth) GetKeyPassphrase() string {
	if m != nil {
		return m.KeyPassphrase
	}
	return ""
}

type TradeSubscription struct {
	MarketId string `protobuf:"bytes,1,opt,name=marketId,proto3" json:"marketId,omitempty"`
	// optional: use if supplying different exchange keys
	Auth                 *TradeSessionAuth `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TradeSubscription) Reset()         { *m = TradeSubscription{} }
func (m *TradeSubscription) String() string { return proto.CompactTextString(m) }
func (*TradeSubscription) ProtoMessage()    {}
func (*TradeSubscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_f59acd1518508758, []int{5}
}
func (m *TradeSubscription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradeSubscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradeSubscription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TradeSubscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeSubscription.Merge(dst, src)
}
func (m *TradeSubscription) XXX_Size() int {
	return m.Size()
}
func (m *TradeSubscription) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeSubscription.DiscardUnknown(m)
}

var xxx_messageInfo_TradeSubscription proto.InternalMessageInfo

func (m *TradeSubscription) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *TradeSubscription) GetAuth() *TradeSessionAuth {
	if m != nil {
		return m.Auth
	}
	return nil
}

type StreamSubscription struct {
	Resource             string   `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamSubscription) Reset()         { *m = StreamSubscription{} }
func (m *StreamSubscription) String() string { return proto.CompactTextString(m) }
func (*StreamSubscription) ProtoMessage()    {}
func (*StreamSubscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_f59acd1518508758, []int{6}
}
func (m *StreamSubscription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamSubscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamSubscription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StreamSubscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamSubscription.Merge(dst, src)
}
func (m *StreamSubscription) XXX_Size() int {
	return m.Size()
}
func (m *StreamSubscription) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamSubscription.DiscardUnknown(m)
}

var xxx_messageInfo_StreamSubscription proto.InternalMessageInfo

func (m *StreamSubscription) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

type UserPushSubscription struct {
	// Types that are valid to be assigned to Body:
	//	*UserPushSubscription_TriggeredHandlers_
	//	*UserPushSubscription_Achievements_
	Body                 isUserPushSubscription_Body `protobuf_oneof:"body"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *UserPushSubscription) Reset()         { *m = UserPushSubscription{} }
func (m *UserPushSubscription) String() string { return proto.CompactTextString(m) }
func (*UserPushSubscription) ProtoMessage()    {}
func (*UserPushSubscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_f59acd1518508758, []int{7}
}
func (m *UserPushSubscription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPushSubscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserPushSubscription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserPushSubscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPushSubscription.Merge(dst, src)
}
func (m *UserPushSubscription) XXX_Size() int {
	return m.Size()
}
func (m *UserPushSubscription) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPushSubscription.DiscardUnknown(m)
}

var xxx_messageInfo_UserPushSubscription proto.InternalMessageInfo

type isUserPushSubscription_Body interface {
	isUserPushSubscription_Body()
	MarshalTo([]byte) (int, error)
	Size() int
}

type UserPushSubscription_TriggeredHandlers_ struct {
	TriggeredHandlers *UserPushSubscription_TriggeredHandlers `protobuf:"bytes,1,opt,name=triggered_handlers,json=triggeredHandlers,proto3,oneof"`
}
type UserPushSubscription_Achievements_ struct {
	Achievements *UserPushSubscription_Achievements `protobuf:"bytes,2,opt,name=achievements,proto3,oneof"`
}

func (*UserPushSubscription_TriggeredHandlers_) isUserPushSubscription_Body() {}
func (*UserPushSubscription_Achievements_) isUserPushSubscription_Body()      {}

func (m *UserPushSubscription) GetBody() isUserPushSubscription_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *UserPushSubscription) GetTriggeredHandlers() *UserPushSubscription_TriggeredHandlers {
	if x, ok := m.GetBody().(*UserPushSubscription_TriggeredHandlers_); ok {
		return x.TriggeredHandlers
	}
	return nil
}

func (m *UserPushSubscription) GetAchievements() *UserPushSubscription_Achievements {
	if x, ok := m.GetBody().(*UserPushSubscription_Achievements_); ok {
		return x.Achievements
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UserPushSubscription) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UserPushSubscription_OneofMarshaler, _UserPushSubscription_OneofUnmarshaler, _UserPushSubscription_OneofSizer, []interface{}{
		(*UserPushSubscription_TriggeredHandlers_)(nil),
		(*UserPushSubscription_Achievements_)(nil),
	}
}

func _UserPushSubscription_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UserPushSubscription)
	// body
	switch x := m.Body.(type) {
	case *UserPushSubscription_TriggeredHandlers_:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TriggeredHandlers); err != nil {
			return err
		}
	case *UserPushSubscription_Achievements_:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Achievements); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("UserPushSubscription.Body has unexpected type %T", x)
	}
	return nil
}

func _UserPushSubscription_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UserPushSubscription)
	switch tag {
	case 1: // body.triggered_handlers
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UserPushSubscription_TriggeredHandlers)
		err := b.DecodeMessage(msg)
		m.Body = &UserPushSubscription_TriggeredHandlers_{msg}
		return true, err
	case 2: // body.achievements
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UserPushSubscription_Achievements)
		err := b.DecodeMessage(msg)
		m.Body = &UserPushSubscription_Achievements_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _UserPushSubscription_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UserPushSubscription)
	// body
	switch x := m.Body.(type) {
	case *UserPushSubscription_TriggeredHandlers_:
		s := proto.Size(x.TriggeredHandlers)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UserPushSubscription_Achievements_:
		s := proto.Size(x.Achievements)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type UserPushSubscription_TriggeredHandlers struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserPushSubscription_TriggeredHandlers) Reset() {
	*m = UserPushSubscription_TriggeredHandlers{}
}
func (m *UserPushSubscription_TriggeredHandlers) String() string { return proto.CompactTextString(m) }
func (*UserPushSubscription_TriggeredHandlers) ProtoMessage()    {}
func (*UserPushSubscription_TriggeredHandlers) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_f59acd1518508758, []int{7, 0}
}
func (m *UserPushSubscription_TriggeredHandlers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPushSubscription_TriggeredHandlers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserPushSubscription_TriggeredHandlers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserPushSubscription_TriggeredHandlers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPushSubscription_TriggeredHandlers.Merge(dst, src)
}
func (m *UserPushSubscription_TriggeredHandlers) XXX_Size() int {
	return m.Size()
}
func (m *UserPushSubscription_TriggeredHandlers) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPushSubscription_TriggeredHandlers.DiscardUnknown(m)
}

var xxx_messageInfo_UserPushSubscription_TriggeredHandlers proto.InternalMessageInfo

type UserPushSubscription_Achievements struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserPushSubscription_Achievements) Reset()         { *m = UserPushSubscription_Achievements{} }
func (m *UserPushSubscription_Achievements) String() string { return proto.CompactTextString(m) }
func (*UserPushSubscription_Achievements) ProtoMessage()    {}
func (*UserPushSubscription_Achievements) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_f59acd1518508758, []int{7, 1}
}
func (m *UserPushSubscription_Achievements) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPushSubscription_Achievements) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserPushSubscription_Achievements.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserPushSubscription_Achievements) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPushSubscription_Achievements.Merge(dst, src)
}
func (m *UserPushSubscription_Achievements) XXX_Size() int {
	return m.Size()
}
func (m *UserPushSubscription_Achievements) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPushSubscription_Achievements.DiscardUnknown(m)
}

var xxx_messageInfo_UserPushSubscription_Achievements proto.InternalMessageInfo

// DEPRECATED the UserPushSubscription now wraps trigger-related subscriptions.
type TriggerSubscription struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TriggerSubscription) Reset()         { *m = TriggerSubscription{} }
func (m *TriggerSubscription) String() string { return proto.CompactTextString(m) }
func (*TriggerSubscription) ProtoMessage()    {}
func (*TriggerSubscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_f59acd1518508758, []int{8}
}
func (m *TriggerSubscription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TriggerSubscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TriggerSubscription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TriggerSubscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TriggerSubscription.Merge(dst, src)
}
func (m *TriggerSubscription) XXX_Size() int {
	return m.Size()
}
func (m *TriggerSubscription) XXX_DiscardUnknown() {
	xxx_messageInfo_TriggerSubscription.DiscardUnknown(m)
}

var xxx_messageInfo_TriggerSubscription proto.InternalMessageInfo

type ClientSubscription struct {
	// Types that are valid to be assigned to Body:
	//	*ClientSubscription_StreamSubscription
	//	*ClientSubscription_TradeSubscription
	//	*ClientSubscription_TriggerSubscription
	//	*ClientSubscription_UserPushSubscription
	Body                 isClientSubscription_Body `protobuf_oneof:"body"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ClientSubscription) Reset()         { *m = ClientSubscription{} }
func (m *ClientSubscription) String() string { return proto.CompactTextString(m) }
func (*ClientSubscription) ProtoMessage()    {}
func (*ClientSubscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_f59acd1518508758, []int{9}
}
func (m *ClientSubscription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientSubscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientSubscription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClientSubscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientSubscription.Merge(dst, src)
}
func (m *ClientSubscription) XXX_Size() int {
	return m.Size()
}
func (m *ClientSubscription) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientSubscription.DiscardUnknown(m)
}

var xxx_messageInfo_ClientSubscription proto.InternalMessageInfo

type isClientSubscription_Body interface {
	isClientSubscription_Body()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ClientSubscription_StreamSubscription struct {
	StreamSubscription *StreamSubscription `protobuf:"bytes,1,opt,name=stream_subscription,json=streamSubscription,proto3,oneof"`
}
type ClientSubscription_TradeSubscription struct {
	TradeSubscription *TradeSubscription `protobuf:"bytes,2,opt,name=trade_subscription,json=tradeSubscription,proto3,oneof"`
}
type ClientSubscription_TriggerSubscription struct {
	TriggerSubscription *TriggerSubscription `protobuf:"bytes,3,opt,name=trigger_subscription,json=triggerSubscription,proto3,oneof"`
}
type ClientSubscription_UserPushSubscription struct {
	UserPushSubscription *UserPushSubscription `protobuf:"bytes,4,opt,name=user_push_subscription,json=userPushSubscription,proto3,oneof"`
}

func (*ClientSubscription_StreamSubscription) isClientSubscription_Body()   {}
func (*ClientSubscription_TradeSubscription) isClientSubscription_Body()    {}
func (*ClientSubscription_TriggerSubscription) isClientSubscription_Body()  {}
func (*ClientSubscription_UserPushSubscription) isClientSubscription_Body() {}

func (m *ClientSubscription) GetBody() isClientSubscription_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *ClientSubscription) GetStreamSubscription() *StreamSubscription {
	if x, ok := m.GetBody().(*ClientSubscription_StreamSubscription); ok {
		return x.StreamSubscription
	}
	return nil
}

func (m *ClientSubscription) GetTradeSubscription() *TradeSubscription {
	if x, ok := m.GetBody().(*ClientSubscription_TradeSubscription); ok {
		return x.TradeSubscription
	}
	return nil
}

func (m *ClientSubscription) GetTriggerSubscription() *TriggerSubscription {
	if x, ok := m.GetBody().(*ClientSubscription_TriggerSubscription); ok {
		return x.TriggerSubscription
	}
	return nil
}

func (m *ClientSubscription) GetUserPushSubscription() *UserPushSubscription {
	if x, ok := m.GetBody().(*ClientSubscription_UserPushSubscription); ok {
		return x.UserPushSubscription
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ClientSubscription) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ClientSubscription_OneofMarshaler, _ClientSubscription_OneofUnmarshaler, _ClientSubscription_OneofSizer, []interface{}{
		(*ClientSubscription_StreamSubscription)(nil),
		(*ClientSubscription_TradeSubscription)(nil),
		(*ClientSubscription_TriggerSubscription)(nil),
		(*ClientSubscription_UserPushSubscription)(nil),
	}
}

func _ClientSubscription_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ClientSubscription)
	// body
	switch x := m.Body.(type) {
	case *ClientSubscription_StreamSubscription:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StreamSubscription); err != nil {
			return err
		}
	case *ClientSubscription_TradeSubscription:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TradeSubscription); err != nil {
			return err
		}
	case *ClientSubscription_TriggerSubscription:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TriggerSubscription); err != nil {
			return err
		}
	case *ClientSubscription_UserPushSubscription:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UserPushSubscription); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ClientSubscription.Body has unexpected type %T", x)
	}
	return nil
}

func _ClientSubscription_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ClientSubscription)
	switch tag {
	case 1: // body.stream_subscription
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StreamSubscription)
		err := b.DecodeMessage(msg)
		m.Body = &ClientSubscription_StreamSubscription{msg}
		return true, err
	case 2: // body.trade_subscription
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TradeSubscription)
		err := b.DecodeMessage(msg)
		m.Body = &ClientSubscription_TradeSubscription{msg}
		return true, err
	case 3: // body.trigger_subscription
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TriggerSubscription)
		err := b.DecodeMessage(msg)
		m.Body = &ClientSubscription_TriggerSubscription{msg}
		return true, err
	case 4: // body.user_push_subscription
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UserPushSubscription)
		err := b.DecodeMessage(msg)
		m.Body = &ClientSubscription_UserPushSubscription{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ClientSubscription_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ClientSubscription)
	// body
	switch x := m.Body.(type) {
	case *ClientSubscription_StreamSubscription:
		s := proto.Size(x.StreamSubscription)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientSubscription_TradeSubscription:
		s := proto.Size(x.TradeSubscription)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientSubscription_TriggerSubscription:
		s := proto.Size(x.TriggerSubscription)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientSubscription_UserPushSubscription:
		s := proto.Size(x.UserPushSubscription)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type APIAuthenticationMessage struct {
	Token                string                          `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Nonce                string                          `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ApiKey               string                          `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	Source               APIAuthenticationMessage_Source `protobuf:"varint,4,opt,name=source,proto3,enum=ProtobufClient.APIAuthenticationMessage_Source" json:"source,omitempty"`
	Version              string                          `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	Subscriptions        []string                        `protobuf:"bytes,6,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"` // Deprecated: Do not use.
	ClientSubscriptions  []*ClientSubscription           `protobuf:"bytes,7,rep,name=client_subscriptions,json=clientSubscriptions,proto3" json:"client_subscriptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *APIAuthenticationMessage) Reset()         { *m = APIAuthenticationMessage{} }
func (m *APIAuthenticationMessage) String() string { return proto.CompactTextString(m) }
func (*APIAuthenticationMessage) ProtoMessage()    {}
func (*APIAuthenticationMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_f59acd1518508758, []int{10}
}
func (m *APIAuthenticationMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIAuthenticationMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIAuthenticationMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *APIAuthenticationMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIAuthenticationMessage.Merge(dst, src)
}
func (m *APIAuthenticationMessage) XXX_Size() int {
	return m.Size()
}
func (m *APIAuthenticationMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_APIAuthenticationMessage.DiscardUnknown(m)
}

var xxx_messageInfo_APIAuthenticationMessage proto.InternalMessageInfo

func (m *APIAuthenticationMessage) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *APIAuthenticationMessage) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *APIAuthenticationMessage) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

func (m *APIAuthenticationMessage) GetSource() APIAuthenticationMessage_Source {
	if m != nil {
		return m.Source
	}
	return APIAuthenticationMessage_UNKNOWN
}

func (m *APIAuthenticationMessage) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// Deprecated: Do not use.
func (m *APIAuthenticationMessage) GetSubscriptions() []string {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

func (m *APIAuthenticationMessage) GetClientSubscriptions() []*ClientSubscription {
	if m != nil {
		return m.ClientSubscriptions
	}
	return nil
}

type ClientSessionMessage struct {
	// Types that are valid to be assigned to SessionConfig:
	//	*ClientSessionMessage_Session_
	//	*ClientSessionMessage_AnonymousTradingSession_
	//	*ClientSessionMessage_AnonymousUserSession_
	SessionConfig        isClientSessionMessage_SessionConfig `protobuf_oneof:"SessionConfig"`
	Identification       *ClientIdentificationMessage         `protobuf:"bytes,3,opt,name=identification,proto3" json:"identification,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *ClientSessionMessage) Reset()         { *m = ClientSessionMessage{} }
func (m *ClientSessionMessage) String() string { return proto.CompactTextString(m) }
func (*ClientSessionMessage) ProtoMessage()    {}
func (*ClientSessionMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_f59acd1518508758, []int{11}
}
func (m *ClientSessionMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientSessionMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientSessionMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClientSessionMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientSessionMessage.Merge(dst, src)
}
func (m *ClientSessionMessage) XXX_Size() int {
	return m.Size()
}
func (m *ClientSessionMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientSessionMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ClientSessionMessage proto.InternalMessageInfo

type isClientSessionMessage_SessionConfig interface {
	isClientSessionMessage_SessionConfig()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ClientSessionMessage_Session_ struct {
	Session *ClientSessionMessage_Session `protobuf:"bytes,1,opt,name=session,proto3,oneof"`
}
type ClientSessionMessage_AnonymousTradingSession_ struct {
	AnonymousTradingSession *ClientSessionMessage_AnonymousTradingSession `protobuf:"bytes,2,opt,name=anonymousTradingSession,proto3,oneof"`
}
type ClientSessionMessage_AnonymousUserSession_ struct {
	AnonymousUserSession *ClientSessionMessage_AnonymousUserSession `protobuf:"bytes,4,opt,name=anonymousUserSession,proto3,oneof"`
}

func (*ClientSessionMessage_Session_) isClientSessionMessage_SessionConfig()                 {}
func (*ClientSessionMessage_AnonymousTradingSession_) isClientSessionMessage_SessionConfig() {}
func (*ClientSessionMessage_AnonymousUserSession_) isClientSessionMessage_SessionConfig()    {}

func (m *ClientSessionMessage) GetSessionConfig() isClientSessionMessage_SessionConfig {
	if m != nil {
		return m.SessionConfig
	}
	return nil
}

func (m *ClientSessionMessage) GetSession() *ClientSessionMessage_Session {
	if x, ok := m.GetSessionConfig().(*ClientSessionMessage_Session_); ok {
		return x.Session
	}
	return nil
}

func (m *ClientSessionMessage) GetAnonymousTradingSession() *ClientSessionMessage_AnonymousTradingSession {
	if x, ok := m.GetSessionConfig().(*ClientSessionMessage_AnonymousTradingSession_); ok {
		return x.AnonymousTradingSession
	}
	return nil
}

func (m *ClientSessionMessage) GetAnonymousUserSession() *ClientSessionMessage_AnonymousUserSession {
	if x, ok := m.GetSessionConfig().(*ClientSessionMessage_AnonymousUserSession_); ok {
		return x.AnonymousUserSession
	}
	return nil
}

func (m *ClientSessionMessage) GetIdentification() *ClientIdentificationMessage {
	if m != nil {
		return m.Identification
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ClientSessionMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ClientSessionMessage_OneofMarshaler, _ClientSessionMessage_OneofUnmarshaler, _ClientSessionMessage_OneofSizer, []interface{}{
		(*ClientSessionMessage_Session_)(nil),
		(*ClientSessionMessage_AnonymousTradingSession_)(nil),
		(*ClientSessionMessage_AnonymousUserSession_)(nil),
	}
}

func _ClientSessionMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ClientSessionMessage)
	// SessionConfig
	switch x := m.SessionConfig.(type) {
	case *ClientSessionMessage_Session_:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Session); err != nil {
			return err
		}
	case *ClientSessionMessage_AnonymousTradingSession_:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AnonymousTradingSession); err != nil {
			return err
		}
	case *ClientSessionMessage_AnonymousUserSession_:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AnonymousUserSession); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ClientSessionMessage.SessionConfig has unexpected type %T", x)
	}
	return nil
}

func _ClientSessionMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ClientSessionMessage)
	switch tag {
	case 1: // SessionConfig.session
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClientSessionMessage_Session)
		err := b.DecodeMessage(msg)
		m.SessionConfig = &ClientSessionMessage_Session_{msg}
		return true, err
	case 2: // SessionConfig.anonymousTradingSession
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClientSessionMessage_AnonymousTradingSession)
		err := b.DecodeMessage(msg)
		m.SessionConfig = &ClientSessionMessage_AnonymousTradingSession_{msg}
		return true, err
	case 4: // SessionConfig.anonymousUserSession
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClientSessionMessage_AnonymousUserSession)
		err := b.DecodeMessage(msg)
		m.SessionConfig = &ClientSessionMessage_AnonymousUserSession_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ClientSessionMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ClientSessionMessage)
	// SessionConfig
	switch x := m.SessionConfig.(type) {
	case *ClientSessionMessage_Session_:
		s := proto.Size(x.Session)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientSessionMessage_AnonymousTradingSession_:
		s := proto.Size(x.AnonymousTradingSession)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientSessionMessage_AnonymousUserSession_:
		s := proto.Size(x.AnonymousUserSession)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ClientSessionMessage_Session struct {
	UserId               string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Expires              int64    `protobuf:"varint,2,opt,name=expires,proto3" json:"expires,omitempty"`
	Token                string   `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	MfaToken             string   `protobuf:"bytes,4,opt,name=mfaToken,proto3" json:"mfaToken,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientSessionMessage_Session) Reset()         { *m = ClientSessionMessage_Session{} }
func (m *ClientSessionMessage_Session) String() string { return proto.CompactTextString(m) }
func (*ClientSessionMessage_Session) ProtoMessage()    {}
func (*ClientSessionMessage_Session) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_f59acd1518508758, []int{11, 0}
}
func (m *ClientSessionMessage_Session) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientSessionMessage_Session) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientSessionMessage_Session.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClientSessionMessage_Session) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientSessionMessage_Session.Merge(dst, src)
}
func (m *ClientSessionMessage_Session) XXX_Size() int {
	return m.Size()
}
func (m *ClientSessionMessage_Session) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientSessionMessage_Session.DiscardUnknown(m)
}

var xxx_messageInfo_ClientSessionMessage_Session proto.InternalMessageInfo

func (m *ClientSessionMessage_Session) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ClientSessionMessage_Session) GetExpires() int64 {
	if m != nil {
		return m.Expires
	}
	return 0
}

func (m *ClientSessionMessage_Session) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ClientSessionMessage_Session) GetMfaToken() string {
	if m != nil {
		return m.MfaToken
	}
	return ""
}

type ClientSessionMessage_AnonymousTradingSession struct {
	Exchange             string   `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Expiration           int64    `protobuf:"varint,3,opt,name=expiration,proto3" json:"expiration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientSessionMessage_AnonymousTradingSession) Reset() {
	*m = ClientSessionMessage_AnonymousTradingSession{}
}
func (m *ClientSessionMessage_AnonymousTradingSession) String() string {
	return proto.CompactTextString(m)
}
func (*ClientSessionMessage_AnonymousTradingSession) ProtoMessage() {}
func (*ClientSessionMessage_AnonymousTradingSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_f59acd1518508758, []int{11, 1}
}
func (m *ClientSessionMessage_AnonymousTradingSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientSessionMessage_AnonymousTradingSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientSessionMessage_AnonymousTradingSession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClientSessionMessage_AnonymousTradingSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientSessionMessage_AnonymousTradingSession.Merge(dst, src)
}
func (m *ClientSessionMessage_AnonymousTradingSession) XXX_Size() int {
	return m.Size()
}
func (m *ClientSessionMessage_AnonymousTradingSession) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientSessionMessage_AnonymousTradingSession.DiscardUnknown(m)
}

var xxx_messageInfo_ClientSessionMessage_AnonymousTradingSession proto.InternalMessageInfo

func (m *ClientSessionMessage_AnonymousTradingSession) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *ClientSessionMessage_AnonymousTradingSession) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ClientSessionMessage_AnonymousTradingSession) GetExpiration() int64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

type ClientSessionMessage_AnonymousUserSession struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientSessionMessage_AnonymousUserSession) Reset() {
	*m = ClientSessionMessage_AnonymousUserSession{}
}
func (m *ClientSessionMessage_AnonymousUserSession) String() string { return proto.CompactTextString(m) }
func (*ClientSessionMessage_AnonymousUserSession) ProtoMessage()    {}
func (*ClientSessionMessage_AnonymousUserSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_f59acd1518508758, []int{11, 2}
}
func (m *ClientSessionMessage_AnonymousUserSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientSessionMessage_AnonymousUserSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientSessionMessage_AnonymousUserSession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClientSessionMessage_AnonymousUserSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientSessionMessage_AnonymousUserSession.Merge(dst, src)
}
func (m *ClientSessionMessage_AnonymousUserSession) XXX_Size() int {
	return m.Size()
}
func (m *ClientSessionMessage_AnonymousUserSession) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientSessionMessage_AnonymousUserSession.DiscardUnknown(m)
}

var xxx_messageInfo_ClientSessionMessage_AnonymousUserSession proto.InternalMessageInfo

func (m *ClientSessionMessage_AnonymousUserSession) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// SubscribeMessage informs the Stream Hub to subscribe the current web socket to
// the supplied channel.
type ClientSubscribeMessage struct {
	SubscriptionKeys     []string              `protobuf:"bytes,1,rep,name=subscriptionKeys,proto3" json:"subscriptionKeys,omitempty"` // Deprecated: Do not use.
	Subscriptions        []*ClientSubscription `protobuf:"bytes,2,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ClientSubscribeMessage) Reset()         { *m = ClientSubscribeMessage{} }
func (m *ClientSubscribeMessage) String() string { return proto.CompactTextString(m) }
func (*ClientSubscribeMessage) ProtoMessage()    {}
func (*ClientSubscribeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_f59acd1518508758, []int{12}
}
func (m *ClientSubscribeMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientSubscribeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientSubscribeMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClientSubscribeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientSubscribeMessage.Merge(dst, src)
}
func (m *ClientSubscribeMessage) XXX_Size() int {
	return m.Size()
}
func (m *ClientSubscribeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientSubscribeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ClientSubscribeMessage proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *ClientSubscribeMessage) GetSubscriptionKeys() []string {
	if m != nil {
		return m.SubscriptionKeys
	}
	return nil
}

func (m *ClientSubscribeMessage) GetSubscriptions() []*ClientSubscription {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

// UnsubscribeMessage informs the Stream Hub to unsubscribe the current web socket
// from the supplied channel.
type ClientUnsubscribeMessage struct {
	SubscriptionKeys     []string              `protobuf:"bytes,1,rep,name=subscriptionKeys,proto3" json:"subscriptionKeys,omitempty"` // Deprecated: Do not use.
	Subscriptions        []*ClientSubscription `protobuf:"bytes,2,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ClientUnsubscribeMessage) Reset()         { *m = ClientUnsubscribeMessage{} }
func (m *ClientUnsubscribeMessage) String() string { return proto.CompactTextString(m) }
func (*ClientUnsubscribeMessage) ProtoMessage()    {}
func (*ClientUnsubscribeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_f59acd1518508758, []int{13}
}
func (m *ClientUnsubscribeMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientUnsubscribeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientUnsubscribeMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClientUnsubscribeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientUnsubscribeMessage.Merge(dst, src)
}
func (m *ClientUnsubscribeMessage) XXX_Size() int {
	return m.Size()
}
func (m *ClientUnsubscribeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientUnsubscribeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ClientUnsubscribeMessage proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *ClientUnsubscribeMessage) GetSubscriptionKeys() []string {
	if m != nil {
		return m.SubscriptionKeys
	}
	return nil
}

func (m *ClientUnsubscribeMessage) GetSubscriptions() []*ClientSubscription {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

func init() {
	proto.RegisterType((*ClientMessage)(nil), "ProtobufClient.ClientMessage")
	proto.RegisterType((*ClientIdentificationMessage)(nil), "ProtobufClient.ClientIdentificationMessage")
	proto.RegisterType((*WebAuthenticationMessage)(nil), "ProtobufClient.WebAuthenticationMessage")
	proto.RegisterType((*WebAuthenticationResult)(nil), "ProtobufClient.WebAuthenticationResult")
	proto.RegisterType((*TradeSessionAuth)(nil), "ProtobufClient.TradeSessionAuth")
	proto.RegisterType((*TradeSubscription)(nil), "ProtobufClient.TradeSubscription")
	proto.RegisterType((*StreamSubscription)(nil), "ProtobufClient.StreamSubscription")
	proto.RegisterType((*UserPushSubscription)(nil), "ProtobufClient.UserPushSubscription")
	proto.RegisterType((*UserPushSubscription_TriggeredHandlers)(nil), "ProtobufClient.UserPushSubscription.TriggeredHandlers")
	proto.RegisterType((*UserPushSubscription_Achievements)(nil), "ProtobufClient.UserPushSubscription.Achievements")
	proto.RegisterType((*TriggerSubscription)(nil), "ProtobufClient.TriggerSubscription")
	proto.RegisterType((*ClientSubscription)(nil), "ProtobufClient.ClientSubscription")
	proto.RegisterType((*APIAuthenticationMessage)(nil), "ProtobufClient.APIAuthenticationMessage")
	proto.RegisterType((*ClientSessionMessage)(nil), "ProtobufClient.ClientSessionMessage")
	proto.RegisterType((*ClientSessionMessage_Session)(nil), "ProtobufClient.ClientSessionMessage.Session")
	proto.RegisterType((*ClientSessionMessage_AnonymousTradingSession)(nil), "ProtobufClient.ClientSessionMessage.AnonymousTradingSession")
	proto.RegisterType((*ClientSessionMessage_AnonymousUserSession)(nil), "ProtobufClient.ClientSessionMessage.AnonymousUserSession")
	proto.RegisterType((*ClientSubscribeMessage)(nil), "ProtobufClient.ClientSubscribeMessage")
	proto.RegisterType((*ClientUnsubscribeMessage)(nil), "ProtobufClient.ClientUnsubscribeMessage")
	proto.RegisterEnum("ProtobufClient.WebAuthenticationResult_Status", WebAuthenticationResult_Status_name, WebAuthenticationResult_Status_value)
	proto.RegisterEnum("ProtobufClient.APIAuthenticationMessage_Source", APIAuthenticationMessage_Source_name, APIAuthenticationMessage_Source_value)
}
func (m *ClientMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Body != nil {
		nn1, err := m.Body.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ClientMessage_Identification) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Identification != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.Identification.Size()))
		n2, err := m.Identification.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *ClientMessage_Subscribe) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Subscribe != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.Subscribe.Size()))
		n3, err := m.Subscribe.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *ClientMessage_Unsubscribe) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Unsubscribe != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.Unsubscribe.Size()))
		n4, err := m.Unsubscribe.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *ClientMessage_WebAuthentication) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.WebAuthentication != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.WebAuthentication.Size()))
		n5, err := m.WebAuthentication.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *ClientMessage_ApiAuthentication) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ApiAuthentication != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.ApiAuthentication.Size()))
		n6, err := m.ApiAuthentication.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *ClientMessage_ClientSession) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ClientSession != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.ClientSession.Size()))
		n7, err := m.ClientSession.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *ClientIdentificationMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientIdentificationMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Useragent) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.Useragent)))
		i += copy(dAtA[i:], m.Useragent)
	}
	if len(m.Revision) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.Revision)))
		i += copy(dAtA[i:], m.Revision)
	}
	if len(m.Integration) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.Integration)))
		i += copy(dAtA[i:], m.Integration)
	}
	if len(m.Locale) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.Locale)))
		i += copy(dAtA[i:], m.Locale)
	}
	if len(m.Subscriptions) > 0 {
		for _, s := range m.Subscriptions {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ClientSubscriptions) > 0 {
		for _, msg := range m.ClientSubscriptions {
			dAtA[i] = 0x32
			i++
			i = encodeVarintClient(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WebAuthenticationMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebAuthenticationMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Identification != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.Identification.Size()))
		n8, err := m.Identification.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.Nonce) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.Nonce)))
		i += copy(dAtA[i:], m.Nonce)
	}
	if len(m.AccessList) > 0 {
		for _, s := range m.AccessList {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WebAuthenticationResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebAuthenticationResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TradeSessionAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradeSessionAuth) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.ApiKey)))
		i += copy(dAtA[i:], m.ApiKey)
	}
	if len(m.ApiSecret) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.ApiSecret)))
		i += copy(dAtA[i:], m.ApiSecret)
	}
	if len(m.CustomerId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.CustomerId)))
		i += copy(dAtA[i:], m.CustomerId)
	}
	if len(m.KeyPassphrase) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.KeyPassphrase)))
		i += copy(dAtA[i:], m.KeyPassphrase)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TradeSubscription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradeSubscription) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MarketId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.MarketId)))
		i += copy(dAtA[i:], m.MarketId)
	}
	if m.Auth != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.Auth.Size()))
		n9, err := m.Auth.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StreamSubscription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamSubscription) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Resource) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.Resource)))
		i += copy(dAtA[i:], m.Resource)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserPushSubscription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPushSubscription) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Body != nil {
		nn10, err := m.Body.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn10
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserPushSubscription_TriggeredHandlers_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TriggeredHandlers != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.TriggeredHandlers.Size()))
		n11, err := m.TriggeredHandlers.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *UserPushSubscription_Achievements_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Achievements != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.Achievements.Size()))
		n12, err := m.Achievements.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *UserPushSubscription_TriggeredHandlers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPushSubscription_TriggeredHandlers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserPushSubscription_Achievements) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPushSubscription_Achievements) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TriggerSubscription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TriggerSubscription) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ClientSubscription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientSubscription) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Body != nil {
		nn13, err := m.Body.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn13
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ClientSubscription_StreamSubscription) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.StreamSubscription != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.StreamSubscription.Size()))
		n14, err := m.StreamSubscription.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *ClientSubscription_TradeSubscription) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TradeSubscription != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.TradeSubscription.Size()))
		n15, err := m.TradeSubscription.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *ClientSubscription_TriggerSubscription) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TriggerSubscription != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.TriggerSubscription.Size()))
		n16, err := m.TriggerSubscription.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *ClientSubscription_UserPushSubscription) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UserPushSubscription != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.UserPushSubscription.Size()))
		n17, err := m.UserPushSubscription.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *APIAuthenticationMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIAuthenticationMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.Nonce) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.Nonce)))
		i += copy(dAtA[i:], m.Nonce)
	}
	if len(m.ApiKey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.ApiKey)))
		i += copy(dAtA[i:], m.ApiKey)
	}
	if m.Source != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.Source))
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if len(m.Subscriptions) > 0 {
		for _, s := range m.Subscriptions {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ClientSubscriptions) > 0 {
		for _, msg := range m.ClientSubscriptions {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintClient(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ClientSessionMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientSessionMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SessionConfig != nil {
		nn18, err := m.SessionConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn18
	}
	if m.Identification != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.Identification.Size()))
		n19, err := m.Identification.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ClientSessionMessage_Session_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Session != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.Session.Size()))
		n20, err := m.Session.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}
func (m *ClientSessionMessage_AnonymousTradingSession_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AnonymousTradingSession != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.AnonymousTradingSession.Size()))
		n21, err := m.AnonymousTradingSession.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}
func (m *ClientSessionMessage_AnonymousUserSession_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AnonymousUserSession != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.AnonymousUserSession.Size()))
		n22, err := m.AnonymousUserSession.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}
func (m *ClientSessionMessage_Session) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientSessionMessage_Session) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if m.Expires != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.Expires))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.MfaToken) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.MfaToken)))
		i += copy(dAtA[i:], m.MfaToken)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ClientSessionMessage_AnonymousTradingSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientSessionMessage_AnonymousTradingSession) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Exchange) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.Exchange)))
		i += copy(dAtA[i:], m.Exchange)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.Expiration != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.Expiration))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ClientSessionMessage_AnonymousUserSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientSessionMessage_AnonymousUserSession) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ClientSubscribeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientSubscribeMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SubscriptionKeys) > 0 {
		for _, s := range m.SubscriptionKeys {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Subscriptions) > 0 {
		for _, msg := range m.Subscriptions {
			dAtA[i] = 0x12
			i++
			i = encodeVarintClient(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ClientUnsubscribeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientUnsubscribeMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SubscriptionKeys) > 0 {
		for _, s := range m.SubscriptionKeys {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Subscriptions) > 0 {
		for _, msg := range m.Subscriptions {
			dAtA[i] = 0x12
			i++
			i = encodeVarintClient(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintClient(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ClientMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Body != nil {
		n += m.Body.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClientMessage_Identification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Identification != nil {
		l = m.Identification.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}
func (m *ClientMessage_Subscribe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Subscribe != nil {
		l = m.Subscribe.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}
func (m *ClientMessage_Unsubscribe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Unsubscribe != nil {
		l = m.Unsubscribe.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}
func (m *ClientMessage_WebAuthentication) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WebAuthentication != nil {
		l = m.WebAuthentication.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}
func (m *ClientMessage_ApiAuthentication) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiAuthentication != nil {
		l = m.ApiAuthentication.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}
func (m *ClientMessage_ClientSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientSession != nil {
		l = m.ClientSession.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}
func (m *ClientIdentificationMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Useragent)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.Revision)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.Integration)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.Locale)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if len(m.Subscriptions) > 0 {
		for _, s := range m.Subscriptions {
			l = len(s)
			n += 1 + l + sovClient(uint64(l))
		}
	}
	if len(m.ClientSubscriptions) > 0 {
		for _, e := range m.ClientSubscriptions {
			l = e.Size()
			n += 1 + l + sovClient(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WebAuthenticationMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Identification != nil {
		l = m.Identification.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if len(m.AccessList) > 0 {
		for _, s := range m.AccessList {
			l = len(s)
			n += 1 + l + sovClient(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WebAuthenticationResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovClient(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TradeSessionAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApiKey)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.ApiSecret)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.CustomerId)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.KeyPassphrase)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TradeSubscription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.Auth != nil {
		l = m.Auth.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StreamSubscription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Resource)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserPushSubscription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Body != nil {
		n += m.Body.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserPushSubscription_TriggeredHandlers_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TriggeredHandlers != nil {
		l = m.TriggeredHandlers.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}
func (m *UserPushSubscription_Achievements_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Achievements != nil {
		l = m.Achievements.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}
func (m *UserPushSubscription_TriggeredHandlers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserPushSubscription_Achievements) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TriggerSubscription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClientSubscription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Body != nil {
		n += m.Body.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClientSubscription_StreamSubscription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StreamSubscription != nil {
		l = m.StreamSubscription.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}
func (m *ClientSubscription_TradeSubscription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TradeSubscription != nil {
		l = m.TradeSubscription.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}
func (m *ClientSubscription_TriggerSubscription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TriggerSubscription != nil {
		l = m.TriggerSubscription.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}
func (m *ClientSubscription_UserPushSubscription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserPushSubscription != nil {
		l = m.UserPushSubscription.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}
func (m *APIAuthenticationMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.ApiKey)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.Source != 0 {
		n += 1 + sovClient(uint64(m.Source))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if len(m.Subscriptions) > 0 {
		for _, s := range m.Subscriptions {
			l = len(s)
			n += 1 + l + sovClient(uint64(l))
		}
	}
	if len(m.ClientSubscriptions) > 0 {
		for _, e := range m.ClientSubscriptions {
			l = e.Size()
			n += 1 + l + sovClient(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClientSessionMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionConfig != nil {
		n += m.SessionConfig.Size()
	}
	if m.Identification != nil {
		l = m.Identification.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClientSessionMessage_Session_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Session != nil {
		l = m.Session.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}
func (m *ClientSessionMessage_AnonymousTradingSession_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnonymousTradingSession != nil {
		l = m.AnonymousTradingSession.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}
func (m *ClientSessionMessage_AnonymousUserSession_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnonymousUserSession != nil {
		l = m.AnonymousUserSession.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}
func (m *ClientSessionMessage_Session) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.Expires != 0 {
		n += 1 + sovClient(uint64(m.Expires))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.MfaToken)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClientSessionMessage_AnonymousTradingSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Exchange)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.Expiration != 0 {
		n += 1 + sovClient(uint64(m.Expiration))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClientSessionMessage_AnonymousUserSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClientSubscribeMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SubscriptionKeys) > 0 {
		for _, s := range m.SubscriptionKeys {
			l = len(s)
			n += 1 + l + sovClient(uint64(l))
		}
	}
	if len(m.Subscriptions) > 0 {
		for _, e := range m.Subscriptions {
			l = e.Size()
			n += 1 + l + sovClient(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClientUnsubscribeMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SubscriptionKeys) > 0 {
		for _, s := range m.SubscriptionKeys {
			l = len(s)
			n += 1 + l + sovClient(uint64(l))
		}
	}
	if len(m.Subscriptions) > 0 {
		for _, e := range m.Subscriptions {
			l = e.Size()
			n += 1 + l + sovClient(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovClient(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozClient(x uint64) (n int) {
	return sovClient(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClientMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClientIdentificationMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ClientMessage_Identification{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscribe", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClientSubscribeMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ClientMessage_Subscribe{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unsubscribe", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClientUnsubscribeMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ClientMessage_Unsubscribe{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebAuthentication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WebAuthenticationMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ClientMessage_WebAuthentication{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiAuthentication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &APIAuthenticationMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ClientMessage_ApiAuthentication{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClientSessionMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ClientMessage_ClientSession{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientIdentificationMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientIdentificationMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientIdentificationMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Useragent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Useragent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Revision = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Integration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Integration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locale = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriptions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriptions = append(m.Subscriptions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSubscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientSubscriptions = append(m.ClientSubscriptions, &ClientSubscription{})
			if err := m.ClientSubscriptions[len(m.ClientSubscriptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebAuthenticationMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebAuthenticationMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebAuthenticationMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Identification == nil {
				m.Identification = &ClientIdentificationMessage{}
			}
			if err := m.Identification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessList = append(m.AccessList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebAuthenticationResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebAuthenticationResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebAuthenticationResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (WebAuthenticationResult_Status(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TradeSessionAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradeSessionAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradeSessionAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyPassphrase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyPassphrase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TradeSubscription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradeSubscription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradeSubscription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auth == nil {
				m.Auth = &TradeSessionAuth{}
			}
			if err := m.Auth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamSubscription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamSubscription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamSubscription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserPushSubscription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPushSubscription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPushSubscription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggeredHandlers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UserPushSubscription_TriggeredHandlers{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &UserPushSubscription_TriggeredHandlers_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Achievements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UserPushSubscription_Achievements{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &UserPushSubscription_Achievements_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserPushSubscription_TriggeredHandlers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TriggeredHandlers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TriggeredHandlers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserPushSubscription_Achievements) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Achievements: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Achievements: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TriggerSubscription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TriggerSubscription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TriggerSubscription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientSubscription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientSubscription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientSubscription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamSubscription", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StreamSubscription{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ClientSubscription_StreamSubscription{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeSubscription", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TradeSubscription{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ClientSubscription_TradeSubscription{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerSubscription", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TriggerSubscription{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ClientSubscription_TriggerSubscription{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPushSubscription", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UserPushSubscription{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ClientSubscription_UserPushSubscription{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIAuthenticationMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIAuthenticationMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIAuthenticationMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= (APIAuthenticationMessage_Source(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriptions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriptions = append(m.Subscriptions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSubscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientSubscriptions = append(m.ClientSubscriptions, &ClientSubscription{})
			if err := m.ClientSubscriptions[len(m.ClientSubscriptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientSessionMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientSessionMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientSessionMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClientSessionMessage_Session{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SessionConfig = &ClientSessionMessage_Session_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnonymousTradingSession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClientSessionMessage_AnonymousTradingSession{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SessionConfig = &ClientSessionMessage_AnonymousTradingSession_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Identification == nil {
				m.Identification = &ClientIdentificationMessage{}
			}
			if err := m.Identification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnonymousUserSession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClientSessionMessage_AnonymousUserSession{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SessionConfig = &ClientSessionMessage_AnonymousUserSession_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientSessionMessage_Session) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Session: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Session: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			m.Expires = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expires |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MfaToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MfaToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientSessionMessage_AnonymousTradingSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnonymousTradingSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnonymousTradingSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exchange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exchange = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			m.Expiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientSessionMessage_AnonymousUserSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnonymousUserSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnonymousUserSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientSubscribeMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientSubscribeMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientSubscribeMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionKeys = append(m.SubscriptionKeys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriptions = append(m.Subscriptions, &ClientSubscription{})
			if err := m.Subscriptions[len(m.Subscriptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientUnsubscribeMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientUnsubscribeMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientUnsubscribeMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionKeys = append(m.SubscriptionKeys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriptions = append(m.Subscriptions, &ClientSubscription{})
			if err := m.Subscriptions[len(m.Subscriptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClient(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClient
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthClient
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowClient
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipClient(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthClient = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClient   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("public/client/client.proto", fileDescriptor_client_f59acd1518508758) }

var fileDescriptor_client_f59acd1518508758 = []byte{
	// 1238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0xdd, 0x6e, 0xe3, 0xc4,
	0x17, 0x8f, 0xe3, 0xd4, 0xd9, 0x9c, 0x34, 0xd9, 0x74, 0x92, 0x7f, 0x1b, 0xe5, 0x0f, 0xa5, 0x98,
	0x0f, 0x55, 0x62, 0x95, 0x85, 0x05, 0x21, 0x21, 0x71, 0x93, 0xb6, 0xd9, 0x4d, 0x68, 0x37, 0x2d,
	0xe3, 0x64, 0x0b, 0xd2, 0x4a, 0x96, 0xe3, 0x4c, 0x13, 0x2b, 0x89, 0x1d, 0x79, 0xc6, 0xcb, 0xe6,
	0x1a, 0x71, 0xc3, 0x1d, 0x88, 0x0b, 0x9e, 0x80, 0x07, 0xe0, 0x16, 0x1e, 0x80, 0x4b, 0x1e, 0x01,
	0x2d, 0x2f, 0x82, 0xc6, 0x1e, 0x27, 0x76, 0xec, 0x2c, 0x45, 0x8b, 0xc4, 0x55, 0x72, 0xce, 0x9c,
	0xf3, 0x9b, 0x33, 0xbf, 0x39, 0x1f, 0x63, 0x68, 0x2c, 0xbc, 0xe1, 0xcc, 0x32, 0xef, 0x9b, 0x33,
	0x8b, 0xd8, 0x4c, 0xfc, 0x34, 0x17, 0xae, 0xc3, 0x1c, 0x54, 0xbe, 0xe2, 0x3f, 0x43, 0xef, 0xe6,
	0xd4, 0xd7, 0xaa, 0xdf, 0xe6, 0xa0, 0x14, 0xfc, 0x7d, 0x4c, 0x28, 0x35, 0xc6, 0x04, 0x7d, 0x09,
	0x65, 0x6b, 0x44, 0x6c, 0x66, 0xdd, 0x58, 0xa6, 0xc1, 0x2c, 0xc7, 0xae, 0x4b, 0x47, 0xd2, 0x71,
	0xf1, 0xc1, 0x7b, 0xcd, 0xb8, 0x6b, 0x33, 0xf8, 0xe9, 0xc6, 0x6c, 0x05, 0xc8, 0x49, 0xb6, 0x2e,
	0x75, 0x32, 0x78, 0x03, 0x08, 0x3d, 0x84, 0x02, 0xf5, 0x86, 0xd4, 0x74, 0xad, 0x21, 0xa9, 0x67,
	0x7d, 0xd4, 0x77, 0xd3, 0x51, 0xb5, 0xd0, 0x4c, 0x00, 0x76, 0x32, 0x78, 0xed, 0x8a, 0x2e, 0xa0,
	0xe8, 0xd9, 0x6b, 0x24, 0xd9, 0x47, 0x3a, 0x4e, 0x47, 0x1a, 0xac, 0x0d, 0xd7, 0x58, 0x51, 0x77,
	0xf4, 0x05, 0xec, 0x7d, 0x45, 0x86, 0x2d, 0x8f, 0x4d, 0x78, 0xb0, 0xe2, 0xcc, 0xb9, 0x74, 0xcc,
	0xeb, 0x4d, 0xc3, 0x35, 0x66, 0x12, 0x84, 0x23, 0x1b, 0x0b, 0x6b, 0x03, 0x79, 0x27, 0x1d, 0xb9,
	0x75, 0xd5, 0xdd, 0x8a, 0x9c, 0x00, 0x41, 0x17, 0x50, 0x0a, 0xae, 0x55, 0x23, 0x94, 0x72, 0x54,
	0xc5, 0x47, 0x7d, 0x7b, 0x0b, 0x9b, 0x81, 0xd1, 0x1a, 0x31, 0xee, 0x7c, 0xa2, 0x40, 0x6e, 0xe8,
	0x8c, 0x96, 0xea, 0x77, 0x59, 0xf8, 0xff, 0x4b, 0x6e, 0x15, 0xbd, 0x06, 0x05, 0x8f, 0x12, 0xd7,
	0x18, 0x13, 0x9b, 0xf9, 0x59, 0x51, 0xc0, 0x6b, 0x05, 0x6a, 0xc0, 0x1d, 0x97, 0x3c, 0xb3, 0xfc,
	0x70, 0xb2, 0xfe, 0xe2, 0x4a, 0x46, 0x47, 0x50, 0xb4, 0x6c, 0x46, 0xc6, 0x6e, 0xc0, 0x81, 0xec,
	0x2f, 0x47, 0x55, 0x68, 0x1f, 0x94, 0x99, 0x63, 0x1a, 0x33, 0xe2, 0x53, 0x5f, 0xc0, 0x42, 0x42,
	0xc7, 0x50, 0x12, 0x57, 0xb5, 0xe0, 0x76, 0xb4, 0xbe, 0x73, 0x24, 0x1f, 0x17, 0x78, 0x82, 0xe1,
	0xf8, 0x02, 0xea, 0x43, 0xd5, 0x8c, 0x26, 0x8f, 0xb0, 0x57, 0x8e, 0xe4, 0xe3, 0xe2, 0x03, 0xf5,
	0xa5, 0x79, 0xe6, 0x9b, 0xe2, 0x34, 0x77, 0xf5, 0x57, 0x09, 0xea, 0xdb, 0x6e, 0x1d, 0x69, 0xff,
	0x42, 0xad, 0x24, 0xaa, 0xa4, 0x06, 0x3b, 0xcc, 0x99, 0x92, 0x90, 0xc4, 0x40, 0xe0, 0x5a, 0xdb,
	0xb1, 0x4d, 0x22, 0xb8, 0x0b, 0x04, 0xf4, 0x06, 0x14, 0x0d, 0xd3, 0x24, 0x94, 0xea, 0x33, 0x8b,
	0xb2, 0x7a, 0x8e, 0x73, 0x83, 0x21, 0x50, 0x5d, 0x58, 0x94, 0xa9, 0x3f, 0x4b, 0x70, 0x90, 0x08,
	0x1f, 0x13, 0xea, 0xcd, 0x18, 0x7a, 0x08, 0x0a, 0x65, 0x06, 0xf3, 0xa8, 0x1f, 0x75, 0xf9, 0x41,
	0xf3, 0x6f, 0xb3, 0x3d, 0x70, 0x6c, 0x6a, 0xbe, 0x17, 0x16, 0xde, 0xea, 0x25, 0x28, 0x81, 0x06,
	0x15, 0x21, 0x3f, 0xe8, 0x9d, 0xf7, 0x2e, 0xaf, 0x7b, 0x95, 0x0c, 0xda, 0x83, 0x52, 0x6b, 0xd0,
	0xef, 0xb4, 0x7b, 0xfd, 0xee, 0x69, 0xab, 0xdf, 0x3e, 0xab, 0x48, 0xa8, 0x0a, 0x77, 0xbb, 0xbd,
	0x27, 0xad, 0x8b, 0xee, 0x99, 0xae, 0xb5, 0x35, 0xad, 0x7b, 0xd9, 0xab, 0x64, 0x51, 0x05, 0x76,
	0x1f, 0x3f, 0x6c, 0xe9, 0xb8, 0xfd, 0xf9, 0xa0, 0x8b, 0xdb, 0x67, 0x15, 0x59, 0xfd, 0x5e, 0x82,
	0x4a, 0xdf, 0x35, 0x46, 0x44, 0x24, 0x28, 0x0f, 0x02, 0x1d, 0x40, 0xde, 0x58, 0x58, 0xfa, 0x94,
	0x2c, 0x45, 0xea, 0x29, 0xc6, 0xc2, 0x3a, 0x27, 0x4b, 0xf4, 0x3a, 0x00, 0x5f, 0xa0, 0xc4, 0x74,
	0x09, 0x13, 0xa4, 0x15, 0x8c, 0x85, 0xa5, 0xf9, 0x0a, 0x4e, 0x91, 0xe9, 0x51, 0xe6, 0xcc, 0x89,
	0xab, 0x5b, 0x23, 0x41, 0x1f, 0x84, 0xaa, 0xee, 0x08, 0xbd, 0x03, 0xe5, 0x29, 0x59, 0xea, 0x0b,
	0x83, 0xd2, 0xc5, 0xc4, 0x35, 0x68, 0x98, 0x81, 0xa5, 0x29, 0x59, 0x5e, 0xad, 0x94, 0x2a, 0x81,
	0xbd, 0x20, 0xa6, 0x48, 0x7a, 0xf0, 0x9c, 0x9f, 0x1b, 0xee, 0x94, 0xb0, 0xee, 0x48, 0x44, 0xb5,
	0x92, 0xd1, 0x47, 0x90, 0x33, 0x3c, 0x36, 0x11, 0x8d, 0xee, 0x68, 0x93, 0xdc, 0xcd, 0x03, 0x62,
	0xdf, 0x5a, 0x7d, 0x1f, 0x90, 0xc6, 0x5c, 0x62, 0xcc, 0x37, 0xf7, 0x71, 0x09, 0x75, 0x3c, 0xd7,
	0x24, 0xe1, 0x3e, 0xa1, 0xac, 0x7e, 0x93, 0x85, 0xda, 0x80, 0x12, 0xf7, 0xca, 0xa3, 0x93, 0x98,
	0xd3, 0x18, 0x10, 0x73, 0xad, 0xf1, 0x98, 0xb8, 0x64, 0xa4, 0x4f, 0x0c, 0x7b, 0x34, 0x23, 0x2e,
	0x15, 0x19, 0xfa, 0xf1, 0x66, 0x38, 0x69, 0x08, 0xcd, 0x7e, 0xe8, 0xde, 0x11, 0xde, 0xbc, 0x1b,
	0xb1, 0x4d, 0x25, 0xba, 0x86, 0x5d, 0xc3, 0x9c, 0x58, 0xe4, 0x19, 0x99, 0x13, 0x9b, 0x51, 0x71,
	0xe2, 0x0f, 0x6e, 0xb5, 0x45, 0x2b, 0xe2, 0xd8, 0xc9, 0xe0, 0x18, 0x50, 0xa3, 0xca, 0x39, 0xdf,
	0xd8, 0xad, 0x51, 0x86, 0xdd, 0xa8, 0xd3, 0xaa, 0x7b, 0xfd, 0x0f, 0xaa, 0xc2, 0x38, 0xba, 0x81,
	0xfa, 0xb5, 0x0c, 0x28, 0x59, 0xec, 0x68, 0x00, 0x55, 0xea, 0xf3, 0xac, 0x47, 0xbb, 0x88, 0x60,
	0x27, 0xd1, 0x2d, 0x92, 0x57, 0xd2, 0xc9, 0x60, 0x44, 0x93, 0x17, 0x85, 0x39, 0xe7, 0xc6, 0x88,
	0xc4, 0x51, 0x03, 0x42, 0xde, 0x4c, 0x4f, 0x81, 0x38, 0xe8, 0x1e, 0x4b, 0x24, 0xd9, 0x53, 0xa8,
	0x09, 0xce, 0xe3, 0xa8, 0xc1, 0xdc, 0x7b, 0x2b, 0x89, 0x9a, 0x20, 0x41, 0xcc, 0xe3, 0x2a, 0x4b,
	0x2e, 0xa1, 0xa7, 0xb0, 0xcf, 0x7b, 0xb8, 0xbe, 0xf0, 0xe8, 0x24, 0x8e, 0x9f, 0x4b, 0x9f, 0x29,
	0x69, 0xd7, 0xd8, 0xc9, 0xe0, 0x9a, 0x97, 0xa2, 0x5f, 0x5d, 0xce, 0x4f, 0x32, 0xd4, 0xb7, 0x8d,
	0xb8, 0x75, 0xc7, 0x93, 0x52, 0x3b, 0x5e, 0x36, 0xda, 0xf1, 0x22, 0x6d, 0x40, 0x8e, 0xb5, 0x81,
	0x47, 0xa0, 0x88, 0x02, 0xc9, 0xf9, 0xdd, 0xec, 0xfe, 0x6d, 0x27, 0x6c, 0x53, 0xf3, 0xdd, 0xb0,
	0x70, 0x47, 0x75, 0xc8, 0x3f, 0x23, 0x2e, 0x0d, 0x67, 0x75, 0x01, 0x87, 0x62, 0x72, 0x16, 0x29,
	0xdb, 0x66, 0xd1, 0x00, 0x6a, 0xc1, 0x30, 0xd1, 0xe3, 0x0e, 0xf9, 0x57, 0x1b, 0x46, 0x06, 0x28,
	0x41, 0xb0, 0xf1, 0x4e, 0x5b, 0x06, 0x78, 0x74, 0x79, 0xd1, 0xea, 0x3d, 0xd2, 0xb5, 0xb3, 0xf3,
	0x8a, 0x84, 0x10, 0x94, 0x3f, 0x6b, 0x3d, 0x69, 0x69, 0xa7, 0xb8, 0x7b, 0xd5, 0xf7, 0x75, 0x59,
	0xb4, 0x0b, 0x77, 0x7a, 0x97, 0x67, 0x6d, 0x5f, 0x92, 0xb9, 0x84, 0x07, 0x5a, 0xb0, 0xb6, 0x83,
	0x00, 0x94, 0xd3, 0x6b, 0xfd, 0xba, 0x7d, 0x52, 0xc9, 0xa9, 0xbf, 0xec, 0x40, 0x2d, 0xed, 0xd5,
	0x80, 0x3a, 0x90, 0xa7, 0xe2, 0xb1, 0x11, 0x14, 0xc9, 0xbd, 0xdb, 0x3c, 0x36, 0x9a, 0x42, 0xec,
	0x64, 0x70, 0xe8, 0x8e, 0x9e, 0xc3, 0x81, 0x61, 0x3b, 0xf6, 0x72, 0xee, 0x78, 0x94, 0x97, 0x80,
	0x65, 0x8f, 0xc3, 0x67, 0x4c, 0x50, 0x28, 0x9f, 0xde, 0x0a, 0xb9, 0x95, 0x8e, 0xd1, 0xc9, 0xe0,
	0x6d, 0xf0, 0x29, 0xf3, 0x5a, 0x7e, 0xf5, 0x79, 0xed, 0x40, 0x6d, 0xb5, 0x1f, 0xaf, 0x8d, 0xf0,
	0x2c, 0x41, 0xf9, 0x7c, 0xf2, 0xcf, 0xce, 0x12, 0x01, 0xe0, 0x35, 0x95, 0x06, 0xdc, 0x98, 0x43,
	0x3e, 0x3c, 0xd0, 0x3e, 0x28, 0xbc, 0xec, 0x56, 0xd3, 0x47, 0x48, 0x3c, 0x87, 0xc9, 0xf3, 0x85,
	0xe5, 0x92, 0xa0, 0x19, 0xcb, 0x38, 0x14, 0xd7, 0xb5, 0x26, 0x47, 0x6b, 0x8d, 0xcf, 0xb1, 0x1b,
	0xa3, 0xef, 0x2f, 0xe4, 0xc4, 0x1c, 0x13, 0x72, 0x63, 0x0a, 0x07, 0x5b, 0xa8, 0xe6, 0x6e, 0xe4,
	0xb9, 0x39, 0x31, 0xec, 0xf1, 0x6a, 0x2c, 0x85, 0xf2, 0x96, 0x67, 0xcc, 0x21, 0x80, 0x1f, 0xc9,
	0x9a, 0x7d, 0x19, 0x47, 0x34, 0x8d, 0x7b, 0x50, 0x4b, 0xe3, 0x22, 0xbd, 0x45, 0x9c, 0xdc, 0x85,
	0x92, 0x30, 0x38, 0x75, 0xec, 0x1b, 0x6b, 0xcc, 0x5f, 0x0e, 0xfb, 0xe9, 0x5f, 0x10, 0xa8, 0x09,
	0x95, 0x68, 0x2d, 0x9e, 0x93, 0x25, 0x9f, 0x85, 0x61, 0xfd, 0x26, 0xd6, 0x50, 0x67, 0xb3, 0xd8,
	0xb3, 0xb7, 0xae, 0xdd, 0xb8, 0xa3, 0xfa, 0x83, 0x04, 0xf5, 0x6d, 0x1f, 0x23, 0xff, 0x5d, 0x58,
	0x27, 0x95, 0xdf, 0x5e, 0x1c, 0x4a, 0xbf, 0xbf, 0x38, 0x94, 0xfe, 0x78, 0x71, 0x28, 0xfd, 0xf8,
	0xe7, 0x61, 0x66, 0xa8, 0xf8, 0xdf, 0x88, 0x1f, 0xfe, 0x15, 0x00, 0x00, 0xff, 0xff, 0x5f, 0xba,
	0xa3, 0xe1, 0x41, 0x0e, 0x00, 0x00,
}
