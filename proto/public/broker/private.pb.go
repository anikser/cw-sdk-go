// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: public/broker/private.proto

package ProtobufBroker

import (
	fmt "fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	encoding_binary "encoding/binary"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FundingType int32

const (
	FundingType_Spot    FundingType = 0
	FundingType_Margin  FundingType = 1
	FundingType_Staking FundingType = 2
)

var FundingType_name = map[int32]string{
	0: "Spot",
	1: "Margin",
	2: "Staking",
}
var FundingType_value = map[string]int32{
	"Spot":    0,
	"Margin":  1,
	"Staking": 2,
}

func (x FundingType) String() string {
	return proto.EnumName(FundingType_name, int32(x))
}
func (FundingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_private_d25abf97cbe664b1, []int{0}
}

type PrivateOrder_Type int32

const (
	PrivateOrder_Market                  PrivateOrder_Type = 0
	PrivateOrder_Limit                   PrivateOrder_Type = 1
	PrivateOrder_StopLoss                PrivateOrder_Type = 2
	PrivateOrder_StopLossLimit           PrivateOrder_Type = 3
	PrivateOrder_TakeProfit              PrivateOrder_Type = 4
	PrivateOrder_TakeProfitLimit         PrivateOrder_Type = 5
	PrivateOrder_StopLossTakeProfit      PrivateOrder_Type = 6
	PrivateOrder_StopLossTakeProfitLimit PrivateOrder_Type = 7
	PrivateOrder_TrailingStopLoss        PrivateOrder_Type = 8
	PrivateOrder_TrailingStopLossLimit   PrivateOrder_Type = 9
	PrivateOrder_StopLossAndLimit        PrivateOrder_Type = 10
	PrivateOrder_FillOrKill              PrivateOrder_Type = 11
	PrivateOrder_SettlePosition          PrivateOrder_Type = 12
)

var PrivateOrder_Type_name = map[int32]string{
	0:  "Market",
	1:  "Limit",
	2:  "StopLoss",
	3:  "StopLossLimit",
	4:  "TakeProfit",
	5:  "TakeProfitLimit",
	6:  "StopLossTakeProfit",
	7:  "StopLossTakeProfitLimit",
	8:  "TrailingStopLoss",
	9:  "TrailingStopLossLimit",
	10: "StopLossAndLimit",
	11: "FillOrKill",
	12: "SettlePosition",
}
var PrivateOrder_Type_value = map[string]int32{
	"Market":                  0,
	"Limit":                   1,
	"StopLoss":                2,
	"StopLossLimit":           3,
	"TakeProfit":              4,
	"TakeProfitLimit":         5,
	"StopLossTakeProfit":      6,
	"StopLossTakeProfitLimit": 7,
	"TrailingStopLoss":        8,
	"TrailingStopLossLimit":   9,
	"StopLossAndLimit":        10,
	"FillOrKill":              11,
	"SettlePosition":          12,
}

func (x PrivateOrder_Type) String() string {
	return proto.EnumName(PrivateOrder_Type_name, int32(x))
}
func (PrivateOrder_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_private_d25abf97cbe664b1, []int{0, 0}
}

type PrivateOrder_PriceParamType int32

const (
	PrivateOrder_AbsoluteValue         PrivateOrder_PriceParamType = 0
	PrivateOrder_OffsetValue           PrivateOrder_PriceParamType = 1
	PrivateOrder_PrecentageOffsetValue PrivateOrder_PriceParamType = 2
)

var PrivateOrder_PriceParamType_name = map[int32]string{
	0: "AbsoluteValue",
	1: "OffsetValue",
	2: "PrecentageOffsetValue",
}
var PrivateOrder_PriceParamType_value = map[string]int32{
	"AbsoluteValue":         0,
	"OffsetValue":           1,
	"PrecentageOffsetValue": 2,
}

func (x PrivateOrder_PriceParamType) String() string {
	return proto.EnumName(PrivateOrder_PriceParamType_name, int32(x))
}
func (PrivateOrder_PriceParamType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_private_d25abf97cbe664b1, []int{0, 1}
}

type PrivateOrder_CurrencyPairSide int32

const (
	PrivateOrder_CURRENCY_PAIR_SIDE_UNKNOWN PrivateOrder_CurrencyPairSide = 0
	PrivateOrder_CURRENCY_PAIR_SIDE_BASE    PrivateOrder_CurrencyPairSide = 1
	PrivateOrder_CURRENCY_PAIR_SIDE_QUOTE   PrivateOrder_CurrencyPairSide = 2
)

var PrivateOrder_CurrencyPairSide_name = map[int32]string{
	0: "CURRENCY_PAIR_SIDE_UNKNOWN",
	1: "CURRENCY_PAIR_SIDE_BASE",
	2: "CURRENCY_PAIR_SIDE_QUOTE",
}
var PrivateOrder_CurrencyPairSide_value = map[string]int32{
	"CURRENCY_PAIR_SIDE_UNKNOWN": 0,
	"CURRENCY_PAIR_SIDE_BASE":    1,
	"CURRENCY_PAIR_SIDE_QUOTE":   2,
}

func (x PrivateOrder_CurrencyPairSide) String() string {
	return proto.EnumName(PrivateOrder_CurrencyPairSide_name, int32(x))
}
func (PrivateOrder_CurrencyPairSide) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_private_d25abf97cbe664b1, []int{0, 2}
}

type PrivateOrder struct {
	Id                      string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Time                    int64                         `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Side                    int32                         `protobuf:"varint,5,opt,name=side,proto3" json:"side,omitempty"`
	Type                    PrivateOrder_Type             `protobuf:"varint,6,opt,name=type,proto3,enum=ProtobufBroker.PrivateOrder_Type" json:"type,omitempty"`
	FundingType             FundingType                   `protobuf:"varint,7,opt,name=fundingType,proto3,enum=ProtobufBroker.FundingType" json:"fundingType,omitempty"`
	PriceParams             []*PrivateOrder_PriceParam    `protobuf:"bytes,8,rep,name=priceParams,proto3" json:"priceParams,omitempty"`
	AmountParamString       string                        `protobuf:"bytes,16,opt,name=amountParamString,proto3" json:"amountParamString,omitempty"`
	AmountFilledString      string                        `protobuf:"bytes,17,opt,name=amountFilledString,proto3" json:"amountFilledString,omitempty"`
	Leverage                string                        `protobuf:"bytes,10,opt,name=leverage,proto3" json:"leverage,omitempty"`
	CurrentStopString       string                        `protobuf:"bytes,18,opt,name=currentStopString,proto3" json:"currentStopString,omitempty"`
	InitialStopString       string                        `protobuf:"bytes,19,opt,name=initialStopString,proto3" json:"initialStopString,omitempty"`
	StartTime               int64                         `protobuf:"varint,13,opt,name=startTime,proto3" json:"startTime,omitempty"`
	ExpireTime              int64                         `protobuf:"varint,14,opt,name=expireTime,proto3" json:"expireTime,omitempty"`
	Rate                    float32                       `protobuf:"fixed32,15,opt,name=rate,proto3" json:"rate,omitempty"`
	HasClosingOrder         bool                          `protobuf:"varint,20,opt,name=hasClosingOrder,proto3" json:"hasClosingOrder,omitempty"`
	ClosingOrderType        PrivateOrder_Type             `protobuf:"varint,21,opt,name=closingOrderType,proto3,enum=ProtobufBroker.PrivateOrder_Type" json:"closingOrderType,omitempty"`
	ClosingOrderPriceParams []*PrivateOrder_PriceParam    `protobuf:"bytes,22,rep,name=closingOrderPriceParams,proto3" json:"closingOrderPriceParams,omitempty"`
	FeeCurrency             PrivateOrder_CurrencyPairSide `protobuf:"varint,23,opt,name=fee_currency,json=feeCurrency,proto3,enum=ProtobufBroker.PrivateOrder_CurrencyPairSide" json:"fee_currency,omitempty"`
	// PostOnly ensures that a limit order has to be posted on the books (or canceled) entailing maker fees.
	// On the other hand, this feature prevents placing a limit buy order that matches
	// against the sell side of the order book (and vice versa for sell orders) which would result in taker fees.
	PostOnly             bool     `protobuf:"varint,24,opt,name=post_only,json=postOnly,proto3" json:"post_only,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivateOrder) Reset()         { *m = PrivateOrder{} }
func (m *PrivateOrder) String() string { return proto.CompactTextString(m) }
func (*PrivateOrder) ProtoMessage()    {}
func (*PrivateOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_private_d25abf97cbe664b1, []int{0}
}
func (m *PrivateOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PrivateOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateOrder.Merge(dst, src)
}
func (m *PrivateOrder) XXX_Size() int {
	return m.Size()
}
func (m *PrivateOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateOrder.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateOrder proto.InternalMessageInfo

func (m *PrivateOrder) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PrivateOrder) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *PrivateOrder) GetSide() int32 {
	if m != nil {
		return m.Side
	}
	return 0
}

func (m *PrivateOrder) GetType() PrivateOrder_Type {
	if m != nil {
		return m.Type
	}
	return PrivateOrder_Market
}

func (m *PrivateOrder) GetFundingType() FundingType {
	if m != nil {
		return m.FundingType
	}
	return FundingType_Spot
}

func (m *PrivateOrder) GetPriceParams() []*PrivateOrder_PriceParam {
	if m != nil {
		return m.PriceParams
	}
	return nil
}

func (m *PrivateOrder) GetAmountParamString() string {
	if m != nil {
		return m.AmountParamString
	}
	return ""
}

func (m *PrivateOrder) GetAmountFilledString() string {
	if m != nil {
		return m.AmountFilledString
	}
	return ""
}

func (m *PrivateOrder) GetLeverage() string {
	if m != nil {
		return m.Leverage
	}
	return ""
}

func (m *PrivateOrder) GetCurrentStopString() string {
	if m != nil {
		return m.CurrentStopString
	}
	return ""
}

func (m *PrivateOrder) GetInitialStopString() string {
	if m != nil {
		return m.InitialStopString
	}
	return ""
}

func (m *PrivateOrder) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *PrivateOrder) GetExpireTime() int64 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

func (m *PrivateOrder) GetRate() float32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *PrivateOrder) GetHasClosingOrder() bool {
	if m != nil {
		return m.HasClosingOrder
	}
	return false
}

func (m *PrivateOrder) GetClosingOrderType() PrivateOrder_Type {
	if m != nil {
		return m.ClosingOrderType
	}
	return PrivateOrder_Market
}

func (m *PrivateOrder) GetClosingOrderPriceParams() []*PrivateOrder_PriceParam {
	if m != nil {
		return m.ClosingOrderPriceParams
	}
	return nil
}

func (m *PrivateOrder) GetFeeCurrency() PrivateOrder_CurrencyPairSide {
	if m != nil {
		return m.FeeCurrency
	}
	return PrivateOrder_CURRENCY_PAIR_SIDE_UNKNOWN
}

func (m *PrivateOrder) GetPostOnly() bool {
	if m != nil {
		return m.PostOnly
	}
	return false
}

type PrivateOrder_PriceParam struct {
	ValueString          string                      `protobuf:"bytes,3,opt,name=valueString,proto3" json:"valueString,omitempty"`
	Type                 PrivateOrder_PriceParamType `protobuf:"varint,2,opt,name=type,proto3,enum=ProtobufBroker.PrivateOrder_PriceParamType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *PrivateOrder_PriceParam) Reset()         { *m = PrivateOrder_PriceParam{} }
func (m *PrivateOrder_PriceParam) String() string { return proto.CompactTextString(m) }
func (*PrivateOrder_PriceParam) ProtoMessage()    {}
func (*PrivateOrder_PriceParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_private_d25abf97cbe664b1, []int{0, 0}
}
func (m *PrivateOrder_PriceParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateOrder_PriceParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateOrder_PriceParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PrivateOrder_PriceParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateOrder_PriceParam.Merge(dst, src)
}
func (m *PrivateOrder_PriceParam) XXX_Size() int {
	return m.Size()
}
func (m *PrivateOrder_PriceParam) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateOrder_PriceParam.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateOrder_PriceParam proto.InternalMessageInfo

func (m *PrivateOrder_PriceParam) GetValueString() string {
	if m != nil {
		return m.ValueString
	}
	return ""
}

func (m *PrivateOrder_PriceParam) GetType() PrivateOrder_PriceParamType {
	if m != nil {
		return m.Type
	}
	return PrivateOrder_AbsoluteValue
}

type PrivateTrade struct {
	ExternalId   string `protobuf:"bytes,7,opt,name=externalId,proto3" json:"externalId,omitempty"`
	OrderId      string `protobuf:"bytes,8,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Time         int64  `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	TimeMillis   int64  `protobuf:"varint,6,opt,name=timeMillis,proto3" json:"timeMillis,omitempty"`
	PriceString  string `protobuf:"bytes,9,opt,name=priceString,proto3" json:"priceString,omitempty"`
	AmountString string `protobuf:"bytes,10,opt,name=amountString,proto3" json:"amountString,omitempty"`
	Side         int32  `protobuf:"varint,5,opt,name=side,proto3" json:"side,omitempty"`
	// Deprecated since we don't want to expose our SQL IDs
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivateTrade) Reset()         { *m = PrivateTrade{} }
func (m *PrivateTrade) String() string { return proto.CompactTextString(m) }
func (*PrivateTrade) ProtoMessage()    {}
func (*PrivateTrade) Descriptor() ([]byte, []int) {
	return fileDescriptor_private_d25abf97cbe664b1, []int{1}
}
func (m *PrivateTrade) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateTrade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateTrade.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PrivateTrade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateTrade.Merge(dst, src)
}
func (m *PrivateTrade) XXX_Size() int {
	return m.Size()
}
func (m *PrivateTrade) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateTrade.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateTrade proto.InternalMessageInfo

func (m *PrivateTrade) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

func (m *PrivateTrade) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *PrivateTrade) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *PrivateTrade) GetTimeMillis() int64 {
	if m != nil {
		return m.TimeMillis
	}
	return 0
}

func (m *PrivateTrade) GetPriceString() string {
	if m != nil {
		return m.PriceString
	}
	return ""
}

func (m *PrivateTrade) GetAmountString() string {
	if m != nil {
		return m.AmountString
	}
	return ""
}

func (m *PrivateTrade) GetSide() int32 {
	if m != nil {
		return m.Side
	}
	return 0
}

func (m *PrivateTrade) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type PrivatePosition struct {
	Id                 string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Time               int64    `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Side               int32    `protobuf:"varint,3,opt,name=side,proto3" json:"side,omitempty"`
	AvgPriceString     string   `protobuf:"bytes,9,opt,name=avgPriceString,proto3" json:"avgPriceString,omitempty"`
	AmountOpenString   string   `protobuf:"bytes,10,opt,name=amountOpenString,proto3" json:"amountOpenString,omitempty"`
	AmountClosedString string   `protobuf:"bytes,11,opt,name=amountClosedString,proto3" json:"amountClosedString,omitempty"`
	ProfitLoss         string   `protobuf:"bytes,12,opt,name=profitLoss,proto3" json:"profitLoss,omitempty"`
	OrderIds           []string `protobuf:"bytes,7,rep,name=orderIds,proto3" json:"orderIds,omitempty"`
	// NOTE:
	// Trade ids are sent as strings here, while historically they
	// have been represented as integers. We need to transition to using
	// strings everywhere because of the rectangle/square rule; using
	// ints is simply not compatible with some exchanges which use UUIDs (like Kraken lol)
	TradeIds             []string `protobuf:"bytes,8,rep,name=tradeIds,proto3" json:"tradeIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivatePosition) Reset()         { *m = PrivatePosition{} }
func (m *PrivatePosition) String() string { return proto.CompactTextString(m) }
func (*PrivatePosition) ProtoMessage()    {}
func (*PrivatePosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_private_d25abf97cbe664b1, []int{2}
}
func (m *PrivatePosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivatePosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivatePosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PrivatePosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivatePosition.Merge(dst, src)
}
func (m *PrivatePosition) XXX_Size() int {
	return m.Size()
}
func (m *PrivatePosition) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivatePosition.DiscardUnknown(m)
}

var xxx_messageInfo_PrivatePosition proto.InternalMessageInfo

func (m *PrivatePosition) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PrivatePosition) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *PrivatePosition) GetSide() int32 {
	if m != nil {
		return m.Side
	}
	return 0
}

func (m *PrivatePosition) GetAvgPriceString() string {
	if m != nil {
		return m.AvgPriceString
	}
	return ""
}

func (m *PrivatePosition) GetAmountOpenString() string {
	if m != nil {
		return m.AmountOpenString
	}
	return ""
}

func (m *PrivatePosition) GetAmountClosedString() string {
	if m != nil {
		return m.AmountClosedString
	}
	return ""
}

func (m *PrivatePosition) GetProfitLoss() string {
	if m != nil {
		return m.ProfitLoss
	}
	return ""
}

func (m *PrivatePosition) GetOrderIds() []string {
	if m != nil {
		return m.OrderIds
	}
	return nil
}

func (m *PrivatePosition) GetTradeIds() []string {
	if m != nil {
		return m.TradeIds
	}
	return nil
}

type Balance struct {
	Currency             string   `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	AmountString         string   `protobuf:"bytes,3,opt,name=amountString,proto3" json:"amountString,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Balance) Reset()         { *m = Balance{} }
func (m *Balance) String() string { return proto.CompactTextString(m) }
func (*Balance) ProtoMessage()    {}
func (*Balance) Descriptor() ([]byte, []int) {
	return fileDescriptor_private_d25abf97cbe664b1, []int{3}
}
func (m *Balance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Balance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Balance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Balance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Balance.Merge(dst, src)
}
func (m *Balance) XXX_Size() int {
	return m.Size()
}
func (m *Balance) XXX_DiscardUnknown() {
	xxx_messageInfo_Balance.DiscardUnknown(m)
}

var xxx_messageInfo_Balance proto.InternalMessageInfo

func (m *Balance) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *Balance) GetAmountString() string {
	if m != nil {
		return m.AmountString
	}
	return ""
}

type Balances struct {
	FundingType          FundingType `protobuf:"varint,1,opt,name=fundingType,proto3,enum=ProtobufBroker.FundingType" json:"fundingType,omitempty"`
	Balances             []*Balance  `protobuf:"bytes,2,rep,name=balances,proto3" json:"balances,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Balances) Reset()         { *m = Balances{} }
func (m *Balances) String() string { return proto.CompactTextString(m) }
func (*Balances) ProtoMessage()    {}
func (*Balances) Descriptor() ([]byte, []int) {
	return fileDescriptor_private_d25abf97cbe664b1, []int{4}
}
func (m *Balances) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Balances) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Balances.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Balances) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Balances.Merge(dst, src)
}
func (m *Balances) XXX_Size() int {
	return m.Size()
}
func (m *Balances) XXX_DiscardUnknown() {
	xxx_messageInfo_Balances.DiscardUnknown(m)
}

var xxx_messageInfo_Balances proto.InternalMessageInfo

func (m *Balances) GetFundingType() FundingType {
	if m != nil {
		return m.FundingType
	}
	return FundingType_Spot
}

func (m *Balances) GetBalances() []*Balance {
	if m != nil {
		return m.Balances
	}
	return nil
}

func init() {
	proto.RegisterType((*PrivateOrder)(nil), "ProtobufBroker.PrivateOrder")
	proto.RegisterType((*PrivateOrder_PriceParam)(nil), "ProtobufBroker.PrivateOrder.PriceParam")
	proto.RegisterType((*PrivateTrade)(nil), "ProtobufBroker.PrivateTrade")
	proto.RegisterType((*PrivatePosition)(nil), "ProtobufBroker.PrivatePosition")
	proto.RegisterType((*Balance)(nil), "ProtobufBroker.Balance")
	proto.RegisterType((*Balances)(nil), "ProtobufBroker.Balances")
	proto.RegisterEnum("ProtobufBroker.FundingType", FundingType_name, FundingType_value)
	proto.RegisterEnum("ProtobufBroker.PrivateOrder_Type", PrivateOrder_Type_name, PrivateOrder_Type_value)
	proto.RegisterEnum("ProtobufBroker.PrivateOrder_PriceParamType", PrivateOrder_PriceParamType_name, PrivateOrder_PriceParamType_value)
	proto.RegisterEnum("ProtobufBroker.PrivateOrder_CurrencyPairSide", PrivateOrder_CurrencyPairSide_name, PrivateOrder_CurrencyPairSide_value)
}
func (m *PrivateOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateOrder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Time != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(m.Time))
	}
	if m.Side != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(m.Side))
	}
	if m.Type != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(m.Type))
	}
	if m.FundingType != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(m.FundingType))
	}
	if len(m.PriceParams) > 0 {
		for _, msg := range m.PriceParams {
			dAtA[i] = 0x42
			i++
			i = encodeVarintPrivate(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Leverage) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.Leverage)))
		i += copy(dAtA[i:], m.Leverage)
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(m.StartTime))
	}
	if m.ExpireTime != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(m.ExpireTime))
	}
	if m.Rate != 0 {
		dAtA[i] = 0x7d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Rate))))
		i += 4
	}
	if len(m.AmountParamString) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.AmountParamString)))
		i += copy(dAtA[i:], m.AmountParamString)
	}
	if len(m.AmountFilledString) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.AmountFilledString)))
		i += copy(dAtA[i:], m.AmountFilledString)
	}
	if len(m.CurrentStopString) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.CurrentStopString)))
		i += copy(dAtA[i:], m.CurrentStopString)
	}
	if len(m.InitialStopString) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.InitialStopString)))
		i += copy(dAtA[i:], m.InitialStopString)
	}
	if m.HasClosingOrder {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		if m.HasClosingOrder {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ClosingOrderType != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(m.ClosingOrderType))
	}
	if len(m.ClosingOrderPriceParams) > 0 {
		for _, msg := range m.ClosingOrderPriceParams {
			dAtA[i] = 0xb2
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintPrivate(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.FeeCurrency != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(m.FeeCurrency))
	}
	if m.PostOnly {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		if m.PostOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PrivateOrder_PriceParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateOrder_PriceParam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(m.Type))
	}
	if len(m.ValueString) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.ValueString)))
		i += copy(dAtA[i:], m.ValueString)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PrivateTrade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateTrade) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(m.Id))
	}
	if m.Time != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(m.Time))
	}
	if m.Side != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(m.Side))
	}
	if m.TimeMillis != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(m.TimeMillis))
	}
	if len(m.ExternalId) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.ExternalId)))
		i += copy(dAtA[i:], m.ExternalId)
	}
	if len(m.OrderId) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.OrderId)))
		i += copy(dAtA[i:], m.OrderId)
	}
	if len(m.PriceString) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.PriceString)))
		i += copy(dAtA[i:], m.PriceString)
	}
	if len(m.AmountString) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.AmountString)))
		i += copy(dAtA[i:], m.AmountString)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PrivatePosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivatePosition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Time != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(m.Time))
	}
	if m.Side != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(m.Side))
	}
	if len(m.OrderIds) > 0 {
		for _, s := range m.OrderIds {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.TradeIds) > 0 {
		for _, s := range m.TradeIds {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.AvgPriceString) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.AvgPriceString)))
		i += copy(dAtA[i:], m.AvgPriceString)
	}
	if len(m.AmountOpenString) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.AmountOpenString)))
		i += copy(dAtA[i:], m.AmountOpenString)
	}
	if len(m.AmountClosedString) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.AmountClosedString)))
		i += copy(dAtA[i:], m.AmountClosedString)
	}
	if len(m.ProfitLoss) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.ProfitLoss)))
		i += copy(dAtA[i:], m.ProfitLoss)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Balance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Balance) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Currency) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.Currency)))
		i += copy(dAtA[i:], m.Currency)
	}
	if len(m.AmountString) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.AmountString)))
		i += copy(dAtA[i:], m.AmountString)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Balances) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Balances) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FundingType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(m.FundingType))
	}
	if len(m.Balances) > 0 {
		for _, msg := range m.Balances {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPrivate(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintPrivate(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PrivateOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovPrivate(uint64(m.Time))
	}
	if m.Side != 0 {
		n += 1 + sovPrivate(uint64(m.Side))
	}
	if m.Type != 0 {
		n += 1 + sovPrivate(uint64(m.Type))
	}
	if m.FundingType != 0 {
		n += 1 + sovPrivate(uint64(m.FundingType))
	}
	if len(m.PriceParams) > 0 {
		for _, e := range m.PriceParams {
			l = e.Size()
			n += 1 + l + sovPrivate(uint64(l))
		}
	}
	l = len(m.Leverage)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovPrivate(uint64(m.StartTime))
	}
	if m.ExpireTime != 0 {
		n += 1 + sovPrivate(uint64(m.ExpireTime))
	}
	if m.Rate != 0 {
		n += 5
	}
	l = len(m.AmountParamString)
	if l > 0 {
		n += 2 + l + sovPrivate(uint64(l))
	}
	l = len(m.AmountFilledString)
	if l > 0 {
		n += 2 + l + sovPrivate(uint64(l))
	}
	l = len(m.CurrentStopString)
	if l > 0 {
		n += 2 + l + sovPrivate(uint64(l))
	}
	l = len(m.InitialStopString)
	if l > 0 {
		n += 2 + l + sovPrivate(uint64(l))
	}
	if m.HasClosingOrder {
		n += 3
	}
	if m.ClosingOrderType != 0 {
		n += 2 + sovPrivate(uint64(m.ClosingOrderType))
	}
	if len(m.ClosingOrderPriceParams) > 0 {
		for _, e := range m.ClosingOrderPriceParams {
			l = e.Size()
			n += 2 + l + sovPrivate(uint64(l))
		}
	}
	if m.FeeCurrency != 0 {
		n += 2 + sovPrivate(uint64(m.FeeCurrency))
	}
	if m.PostOnly {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivateOrder_PriceParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPrivate(uint64(m.Type))
	}
	l = len(m.ValueString)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivateTrade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPrivate(uint64(m.Id))
	}
	if m.Time != 0 {
		n += 1 + sovPrivate(uint64(m.Time))
	}
	if m.Side != 0 {
		n += 1 + sovPrivate(uint64(m.Side))
	}
	if m.TimeMillis != 0 {
		n += 1 + sovPrivate(uint64(m.TimeMillis))
	}
	l = len(m.ExternalId)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	l = len(m.PriceString)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	l = len(m.AmountString)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivatePosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovPrivate(uint64(m.Time))
	}
	if m.Side != 0 {
		n += 1 + sovPrivate(uint64(m.Side))
	}
	if len(m.OrderIds) > 0 {
		for _, s := range m.OrderIds {
			l = len(s)
			n += 1 + l + sovPrivate(uint64(l))
		}
	}
	if len(m.TradeIds) > 0 {
		for _, s := range m.TradeIds {
			l = len(s)
			n += 1 + l + sovPrivate(uint64(l))
		}
	}
	l = len(m.AvgPriceString)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	l = len(m.AmountOpenString)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	l = len(m.AmountClosedString)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	l = len(m.ProfitLoss)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Balance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	l = len(m.AmountString)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Balances) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FundingType != 0 {
		n += 1 + sovPrivate(uint64(m.FundingType))
	}
	if len(m.Balances) > 0 {
		for _, e := range m.Balances {
			l = e.Size()
			n += 1 + l + sovPrivate(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPrivate(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPrivate(x uint64) (n int) {
	return sovPrivate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PrivateOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			m.Side = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Side |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (PrivateOrder_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundingType", wireType)
			}
			m.FundingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FundingType |= (FundingType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceParams = append(m.PriceParams, &PrivateOrder_PriceParam{})
			if err := m.PriceParams[len(m.PriceParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leverage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Leverage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			m.ExpireTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Rate = float32(math.Float32frombits(v))
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountParamString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountParamString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountFilledString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountFilledString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentStopString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentStopString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialStopString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialStopString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasClosingOrder", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasClosingOrder = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosingOrderType", wireType)
			}
			m.ClosingOrderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClosingOrderType |= (PrivateOrder_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosingOrderPriceParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClosingOrderPriceParams = append(m.ClosingOrderPriceParams, &PrivateOrder_PriceParam{})
			if err := m.ClosingOrderPriceParams[len(m.ClosingOrderPriceParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeCurrency", wireType)
			}
			m.FeeCurrency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeCurrency |= (PrivateOrder_CurrencyPairSide(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PostOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateOrder_PriceParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (PrivateOrder_PriceParamType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateTrade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateTrade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateTrade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			m.Side = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Side |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeMillis", wireType)
			}
			m.TimeMillis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeMillis |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivatePosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivatePosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivatePosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			m.Side = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Side |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderIds = append(m.OrderIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeIds = append(m.TradeIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgPriceString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvgPriceString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountOpenString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountOpenString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountClosedString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountClosedString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfitLoss", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfitLoss = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Balance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Balance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Balance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Balances) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Balances: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Balances: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundingType", wireType)
			}
			m.FundingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FundingType |= (FundingType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, &Balance{})
			if err := m.Balances[len(m.Balances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPrivate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPrivate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPrivate
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPrivate
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPrivate(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPrivate = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPrivate   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("public/broker/private.proto", fileDescriptor_private_d25abf97cbe664b1)
}

var fileDescriptor_private_d25abf97cbe664b1 = []byte{
	// 1061 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xcf, 0x6f, 0x23, 0x35,
	0x14, 0xee, 0x4c, 0x26, 0xc9, 0xe4, 0x4d, 0x9a, 0xba, 0xde, 0x1f, 0x1d, 0xda, 0x55, 0x14, 0x72,
	0x80, 0x68, 0x81, 0x2e, 0xda, 0x15, 0x47, 0x84, 0xda, 0xd2, 0x95, 0x9a, 0xdd, 0x36, 0x83, 0x93,
	0xb2, 0xe2, 0x54, 0x39, 0x89, 0x13, 0xac, 0x4e, 0x67, 0x46, 0x1e, 0xa7, 0xa2, 0x12, 0x17, 0xc4,
	0x8d, 0x23, 0x27, 0xfe, 0x24, 0x8e, 0xdc, 0xb9, 0xa0, 0xf2, 0x8f, 0x20, 0xdb, 0x93, 0xc4, 0x4d,
	0xca, 0x6a, 0x7b, 0x4a, 0xfc, 0xbd, 0xef, 0xf9, 0xd9, 0xdf, 0x7b, 0x7e, 0x6f, 0x60, 0x2f, 0x9b,
	0x0d, 0x63, 0x3e, 0x7a, 0x31, 0x14, 0xe9, 0x25, 0x13, 0x2f, 0x32, 0xc1, 0xaf, 0xa9, 0x64, 0xfb,
	0x99, 0x48, 0x65, 0x8a, 0x1b, 0x91, 0xfa, 0x19, 0xce, 0x26, 0x87, 0xda, 0xda, 0xfe, 0xbd, 0x0e,
	0xf5, 0xc8, 0x30, 0x7a, 0x62, 0xcc, 0x04, 0x6e, 0x80, 0xcb, 0xc7, 0xa1, 0xd3, 0x72, 0x3a, 0x35,
	0xe2, 0xf2, 0x31, 0xc6, 0xe0, 0x49, 0x7e, 0xc5, 0x42, 0xb7, 0xe5, 0x74, 0x4a, 0x44, 0xff, 0x57,
	0x58, 0xce, 0xc7, 0x2c, 0x2c, 0xb7, 0x9c, 0x4e, 0x99, 0xe8, 0xff, 0xf8, 0x2b, 0xf0, 0xe4, 0x4d,
	0xc6, 0xc2, 0x4a, 0xcb, 0xe9, 0x34, 0x5e, 0x7e, 0xbc, 0x7f, 0x37, 0xce, 0xbe, 0x1d, 0x63, 0x7f,
	0x70, 0x93, 0x31, 0xa2, 0xe9, 0xf8, 0x6b, 0x08, 0x26, 0xb3, 0x64, 0xcc, 0x93, 0xa9, 0x02, 0xc3,
	0xaa, 0xf6, 0xde, 0x5b, 0xf5, 0x7e, 0xbd, 0xa4, 0x10, 0x9b, 0x8f, 0x4f, 0x20, 0xc8, 0x04, 0x1f,
	0xb1, 0x88, 0x0a, 0x7a, 0x95, 0x87, 0x7e, 0xab, 0xd4, 0x09, 0x5e, 0x7e, 0xfa, 0xde, 0xe0, 0xd1,
	0x82, 0x4f, 0x6c, 0x5f, 0xbc, 0x0b, 0x7e, 0xcc, 0xae, 0x99, 0xa0, 0x53, 0x16, 0x82, 0xbe, 0xfe,
	0x62, 0x8d, 0x9f, 0x41, 0x2d, 0x97, 0x54, 0xc8, 0x81, 0x52, 0x62, 0x53, 0x2b, 0xb1, 0x04, 0x70,
	0x13, 0x80, 0xfd, 0x94, 0x71, 0xc1, 0xb4, 0xb9, 0xa1, 0xcd, 0x16, 0xa2, 0xe4, 0x12, 0x54, 0xb2,
	0x70, 0xab, 0xe5, 0x74, 0x5c, 0xa2, 0xff, 0xe3, 0xcf, 0x61, 0x9b, 0x5e, 0xa5, 0xb3, 0x44, 0xea,
	0xe8, 0x7d, 0x29, 0x78, 0x32, 0x0d, 0x91, 0x0e, 0xbb, 0x6e, 0xc0, 0xfb, 0x80, 0x0d, 0xf8, 0x9a,
	0xc7, 0x31, 0x1b, 0x17, 0xf4, 0x6d, 0x4d, 0xbf, 0xc7, 0xa2, 0x76, 0x1f, 0xcd, 0x84, 0x60, 0x89,
	0xec, 0xcb, 0x34, 0x2b, 0xe8, 0xd8, 0xec, 0xbe, 0x66, 0x50, 0x6c, 0x9e, 0x70, 0xc9, 0x69, 0x6c,
	0xb1, 0x1f, 0x19, 0xf6, 0x9a, 0x01, 0x77, 0x60, 0xeb, 0x47, 0x9a, 0x1f, 0xc5, 0x69, 0xce, 0x93,
	0xa9, 0x96, 0x34, 0x7c, 0xdc, 0x72, 0x3a, 0x3e, 0x59, 0x85, 0xf1, 0x29, 0xa0, 0x91, 0xb5, 0xd6,
	0x09, 0x7e, 0xf2, 0xa1, 0xe5, 0xb1, 0xe6, 0x8a, 0x29, 0xec, 0xd8, 0x58, 0x64, 0xe5, 0xfd, 0xe9,
	0xc3, 0xf2, 0xfe, 0x7f, 0xfb, 0xe0, 0x08, 0xea, 0x13, 0xc6, 0x2e, 0x8c, 0x44, 0xa3, 0x9b, 0x70,
	0x47, 0x9f, 0xf6, 0x8b, 0xf7, 0xee, 0x7b, 0x54, 0x90, 0x23, 0xca, 0x45, 0x9f, 0x8f, 0x55, 0x81,
	0x32, 0x36, 0x07, 0xf1, 0x1e, 0xd4, 0xb2, 0x34, 0x97, 0x17, 0x69, 0x12, 0xdf, 0x84, 0xa1, 0xd6,
	0xc9, 0x57, 0x40, 0x2f, 0x89, 0x6f, 0x76, 0x7f, 0x06, 0x58, 0x46, 0xc7, 0xdf, 0x14, 0x2f, 0xc8,
	0xd5, 0x41, 0x3f, 0xfb, 0xc0, 0xcb, 0x58, 0x6f, 0xa9, 0x05, 0xc1, 0x35, 0x8d, 0x67, 0xac, 0xc8,
	0x60, 0x49, 0x67, 0xd0, 0x86, 0xba, 0x9e, 0xef, 0x20, 0x97, 0x94, 0x35, 0xd4, 0xfe, 0xd5, 0x05,
	0x4f, 0x0b, 0x0b, 0x50, 0x39, 0xa5, 0xe2, 0x92, 0x49, 0xb4, 0x81, 0x6b, 0x50, 0x7e, 0xcb, 0xaf,
	0xb8, 0x44, 0x0e, 0xae, 0x83, 0xaf, 0xd2, 0xfe, 0x36, 0xcd, 0x73, 0xe4, 0xe2, 0x6d, 0xd8, 0x9c,
	0xaf, 0x0c, 0xa1, 0x84, 0x1b, 0x00, 0x03, 0x7a, 0xc9, 0x22, 0x91, 0x4e, 0xb8, 0x44, 0x1e, 0x7e,
	0x04, 0x5b, 0xcb, 0xb5, 0x21, 0x95, 0xf1, 0x53, 0xc0, 0x73, 0x3f, 0x8b, 0x5c, 0xc1, 0x7b, 0xb0,
	0xb3, 0x8e, 0x1b, 0xa7, 0x2a, 0x7e, 0x0c, 0x68, 0x20, 0x28, 0x8f, 0x79, 0x32, 0x5d, 0x1c, 0xc1,
	0xc7, 0x1f, 0xc1, 0x93, 0x55, 0xd4, 0x38, 0xd4, 0x94, 0xc3, 0x1c, 0x3a, 0x48, 0xc6, 0x06, 0x05,
	0x75, 0x40, 0xf5, 0x2c, 0x7a, 0xe2, 0x0d, 0x8f, 0x63, 0x14, 0x60, 0x0c, 0x8d, 0x3e, 0x93, 0x32,
	0x66, 0x51, 0x9a, 0x73, 0xc9, 0xd3, 0x04, 0xd5, 0xdb, 0x3d, 0x68, 0xdc, 0x15, 0x53, 0xdd, 0xf4,
	0x60, 0x98, 0xa7, 0xf1, 0x4c, 0xb2, 0xef, 0x95, 0x50, 0x68, 0x03, 0x6f, 0x41, 0xd0, 0x9b, 0x4c,
	0x72, 0x26, 0x0d, 0xe0, 0xa8, 0xa3, 0x44, 0x82, 0x8d, 0x58, 0x22, 0xe9, 0x94, 0xd9, 0x26, 0xb7,
	0x7d, 0x05, 0x68, 0xb5, 0x24, 0x70, 0x13, 0x76, 0x8f, 0xce, 0x09, 0x39, 0x3e, 0x3b, 0xfa, 0xe1,
	0x22, 0x3a, 0x38, 0x21, 0x17, 0xfd, 0x93, 0x6f, 0x8f, 0x2f, 0xce, 0xcf, 0xde, 0x9c, 0xf5, 0xde,
	0x9d, 0xa1, 0x0d, 0x25, 0xc6, 0x3d, 0xf6, 0xc3, 0x83, 0xfe, 0x31, 0x72, 0xf0, 0x33, 0x08, 0xef,
	0x31, 0x7e, 0x77, 0xde, 0x1b, 0x1c, 0x23, 0xb7, 0xeb, 0xf9, 0x25, 0xe4, 0x75, 0x3d, 0xdf, 0x43,
	0xe5, 0xae, 0xe7, 0xd7, 0x10, 0x74, 0x3d, 0x3f, 0x40, 0xf5, 0xae, 0xe7, 0xd7, 0xd1, 0x26, 0x29,
	0xeb, 0x0e, 0x47, 0x2a, 0xa6, 0x47, 0x90, 0xc0, 0x7a, 0xfc, 0x24, 0xb0, 0xde, 0x36, 0x09, 0xac,
	0xa6, 0xd3, 0xfe, 0xc5, 0x5d, 0x0c, 0x85, 0x81, 0xa0, 0x63, 0x66, 0x0d, 0x85, 0xd2, 0x83, 0x86,
	0x42, 0x13, 0x40, 0xd9, 0x4e, 0x79, 0x1c, 0xf3, 0x5c, 0x8f, 0x86, 0x12, 0xb1, 0x10, 0xd3, 0x39,
	0x25, 0x13, 0x09, 0x8d, 0x4f, 0xc6, 0xba, 0xf9, 0xd7, 0x88, 0x85, 0xe0, 0x10, 0xaa, 0xa9, 0xaa,
	0xf7, 0x93, 0x71, 0xe8, 0x6b, 0xe3, 0x7c, 0xa9, 0x6a, 0x5d, 0x5f, 0xad, 0xa8, 0xf5, 0x9a, 0xa9,
	0x75, 0x0b, 0xc2, 0x6d, 0xa8, 0x9b, 0x3b, 0x15, 0x14, 0xd3, 0xd3, 0xef, 0x60, 0xb6, 0x78, 0x2b,
	0x52, 0xb5, 0xff, 0x76, 0x61, 0xab, 0xd0, 0x60, 0x5e, 0x2d, 0x0f, 0x9a, 0x8d, 0x25, 0x4b, 0x86,
	0x5d, 0xf0, 0x8b, 0x73, 0xe7, 0x61, 0xb5, 0x55, 0x52, 0xa3, 0x65, 0xbe, 0x56, 0x36, 0xa9, 0x34,
	0x56, 0x36, 0xdf, 0xd8, 0xe6, 0x6b, 0xfc, 0x09, 0x34, 0xe8, 0xf5, 0x34, 0x5a, 0xbb, 0xe7, 0x0a,
	0x8a, 0x9f, 0x03, 0x32, 0xa7, 0xee, 0x65, 0x2c, 0xb9, 0x73, 0xdd, 0x35, 0x7c, 0x39, 0x4a, 0x54,
	0xab, 0x5e, 0x8c, 0x92, 0xc0, 0x1e, 0x25, 0xb6, 0x45, 0xa5, 0x28, 0x33, 0x6f, 0x33, 0xcd, 0xf3,
	0xb0, 0x6e, 0x52, 0xb4, 0x44, 0x16, 0x95, 0x57, 0x46, 0x95, 0xae, 0xe7, 0x57, 0x50, 0x95, 0xf8,
	0xf3, 0xd3, 0x11, 0x58, 0x46, 0x9f, 0x0b, 0x6f, 0xf6, 0x6e, 0xbf, 0x83, 0xea, 0x21, 0x8d, 0x69,
	0x32, 0xd2, 0xe2, 0x2c, 0xfa, 0xad, 0x91, 0x76, 0xb1, 0x5e, 0xcb, 0x61, 0xe9, 0xde, 0x1c, 0xba,
	0xa8, 0xb4, 0x48, 0xdb, 0x6f, 0x0e, 0xf8, 0xc5, 0xce, 0xf9, 0xea, 0xc7, 0x85, 0xf3, 0xc0, 0x8f,
	0x8b, 0x57, 0xe0, 0x0f, 0x8b, 0xad, 0x42, 0x57, 0x4f, 0x98, 0x9d, 0x55, 0xdf, 0x22, 0x14, 0x59,
	0x10, 0xed, 0x92, 0x7a, 0xfe, 0x25, 0x04, 0xd6, 0xe6, 0xd8, 0x07, 0xaf, 0x9f, 0xa5, 0xaa, 0xcb,
	0x9a, 0x8e, 0x3b, 0xe5, 0x09, 0x72, 0x70, 0x00, 0xd5, 0xbe, 0xa4, 0x97, 0x3c, 0x99, 0x22, 0xf7,
	0x10, 0xfd, 0x79, 0xdb, 0x74, 0xfe, 0xba, 0x6d, 0x3a, 0xff, 0xdc, 0x36, 0x9d, 0x3f, 0xfe, 0x6d,
	0x6e, 0x0c, 0x2b, 0xfa, 0xbb, 0xed, 0xd5, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x8d, 0xfa,
	0x07, 0xd6, 0x09, 0x00, 0x00,
}
